plot(density(r.1), main = "Kernel Density Plot: r.1 and r.2", col = "purple")
lines(density(r.2), col = "red")   # Overlay density of r.2
set.seed(42)      # set the random number generator seed so get same output each time
n.trials <- 1000
m.1 <- 12         # mean for random vector r.1
m.2 <- 11         # mean for random vector r.2
sd <- 2           # standard deviation for random numbers
# rnorm is a built in function. You can find out more by typing "?rnorm"
r.1 <- rnorm(n.trials, m.1, sd)   # Generate 1000 normally distributed numbers
r.2 <- rnorm(n.trials, m.2, sd)   # Generate 1000 numbers, with a different mean
plot(density(r.1), main = "Kernel Density Plot: r.1 and r.2", col = "purple")
lines(density(r.2), col = "red")   # Overlay density of r.2
set.seed(42)      # set the random number generator seed so get same output each time
n.trials <- 1000
m.1 <- 10         # mean for random vector r.1
m.2 <- 11         # mean for random vector r.2
sd <- 10           # standard deviation for random numbers
# rnorm is a built in function. You can find out more by typing "?rnorm"
r.1 <- rnorm(n.trials, m.1, sd)   # Generate 1000 normally distributed numbers
r.2 <- rnorm(n.trials, m.2, sd)   # Generate 1000 numbers, with a different mean
plot(density(r.1), main = "Kernel Density Plot: r.1 and r.2", col = "purple")
lines(density(r.2), col = "red")   # Overlay density of r.2
set.seed(42)      # set the random number generator seed so get same output each time
n.trials <- 1000
m.1 <- 10         # mean for random vector r.1
m.2 <- 11         # mean for random vector r.2
sd <- 2           # standard deviation for random numbers
# rnorm is a built in function. You can find out more by typing "?rnorm"
r.1 <- rnorm(n.trials, m.1, sd)   # Generate 1000 normally distributed numbers
r.2 <- rnorm(n.trials, m.2, sd)   # Generate 1000 numbers, with a different mean
plot(density(r.1), main = "Kernel Density Plot: r.1 and r.2", col = "purple")
lines(density(r.2), col = "red")   # Overlay density of r.2
set.seed(42)      # set the random number generator seed so get same output each time
n.trials <- 1000
m.1 <- 10         # mean for random vector r.1
m.2 <- 11         # mean for random vector r.2
sd <- 10           # standard deviation for random numbers
# rnorm is a built in function. You can find out more by typing "?rnorm"
r.1 <- rnorm(n.trials, m.1, sd)   # Generate 1000 normally distributed numbers
r.2 <- rnorm(n.trials, m.2, sd)   # Generate 1000 numbers, with a different mean
plot(density(r.1), main = "Kernel Density Plot: r.1 and r.2", col = "purple")
lines(density(r.2), col = "red")   # Overlay density of r.2
install.packages("gridExtra")
test.statistic<-(1.97-2)/(0.1/sqrt(20))
pt(test.statistic, df=19)*2
qt(0.025, df=19)
test.statistic
test.statistic2<-(1.97-2)/(0.1/sqrt(60))
test.statistic2
pnorm(test.statistic2)
43/50
den<-sqrt((0.75*0.25)/50)
p.test.stat<-(0.86-0.75)/den
p.test.stat
pnorm(p.test.stat)
## [1] 0.03622401
qnorm(0.95)
head(iris)
show(iris)
table(iris$Species)
table(iris$petal.width)
Petal.Width
table(iris$##)
mean(iris$Petal.Length)
head(iris)
mean(iris$Petal.Length)
mean.petal.length<-mean(iris$Petal.Length)
sd.petal.length<-sd(iris$Petal.Length)
sqrt.n<-sqrt(150)
iris.test.statistic<-(mean.petal.length-4)/sd.petal.length/sqrt.n
pnorm(iris.test.statistic)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
shapiro.test(iris$Petal.Length)
shapiro.test(iris$Petal.Width)
setosa.flowers<-subset(iris, iris$Species=="setosa")
versicolor.flowers<-subset(iris, iris$Species=="versicolor")
virginica.flowers<-subset(iris, iris$Species=="virginica")
var(setosa.flowers$Petal.Length)
var.setosa<-var(setosa.flowers$Petal.Length)
var.virginica<-var(virginica.flowers$Petal.Length)
f.st<-var.setosa/var.virginica
f.st
var.test(setosa.flowers$Petal.Length,virginica.flowers$Petal.Length )
var.test(setosa.flowers$Petal.Length,virginica.flowers$Petal.Length )
t.test(setosa.flowers$Petal.Length,virginica.flowers$Petal.Length)
10)])
head(ozone[,
c(6:7,
10)])
head(ozone[, c(6:7, 10)])
library(readr)
uciCar <- read.table(
'http://www.win-vector.com/dfiles/car.data.csv',
sep=',',
header=T
)
read.table(paste('http://archive.ics.uci.edu/ml/',
'machine-learning-databases/statlog/german/german.data',sep=''),
stringsAsFactors=F,header=F)
print(d[1:3,])
colnames(d) <- c('Status.of.existing.checking.account',
'Duration.in.month', 'Credit.history', 'Purpose',
'Credit.amount', 'Savings account/bonds',
'Present.employment.since',
Listing 2.3 Loading the credit dataset
Listing 2.4 Setting column names
Working with data from files 23
'Installment.rate.in.percentage.of.disposable.income',
'Personal.status.and.sex', 'Other.debtors/guarantors',
'Present.residence.since', 'Property', 'Age.in.years',
'Other.installment.plans', 'Housing',
'Number.of.existing.credits.at.this.bank', 'Job',
'Number.of.people.being.liable.to.provide.maintenance.for',
'Telephone', 'foreign.worker', 'Good.Loan')
d$Good.Loan <- as.factor(ifelse(d$Good.Loan==1,'GoodLoan','BadLoan'))
print(d[1:3,])
colnames(d) <- c('Status.of.existing.checking.account',
'Duration.in.month', 'Credit.history', 'Purpose',
'Credit.amount', 'Savings account/bonds',
'Present.employment.since',
Listing 2.3 Loading the credit dataset
Listing 2.4 Setting column names
Working with data from files 23
'Installment.rate.in.percentage.of.disposable.income',
'Personal.status.and.sex', 'Other.debtors/guarantors',
'Present.residence.since', 'Property', 'Age.in.years',
'Other.installment.plans', 'Housing',
'Number.of.existing.credits.at.this.bank', 'Job',
'Number.of.people.being.liable.to.provide.maintenance.for',
'Telephone', 'foreign.worker', 'Good.Loan')
d$Good.Loan <- as.factor(ifelse(d$Good.Loan==1,'GoodLoan','BadLoan'))
print(d[1:3,])
d <- read.table(paste('http://archive.ics.uci.edu/ml/',
'machine-learning-databases/statlog/german/german.data',sep=''),
stringsAsFactors=F,header=F)
print(d[1:3,])
colnames(d) <- c('Status.of.existing.checking.account',
'Duration.in.month', 'Credit.history', 'Purpose',
'Credit.amount', 'Savings account/bonds',
'Present.employment.since',
Listing 2.3 Loading the credit dataset
Listing 2.4 Setting column names
Working with data from files 23
'Installment.rate.in.percentage.of.disposable.income',
'Personal.status.and.sex', 'Other.debtors/guarantors',
'Present.residence.since', 'Property', 'Age.in.years',
'Other.installment.plans', 'Housing',
'Number.of.existing.credits.at.this.bank', 'Job',
'Number.of.people.being.liable.to.provide.maintenance.for',
'Telephone', 'foreign.worker', 'Good.Loan')
d$Good.Loan <- as.factor(ifelse(d$Good.Loan==1,'GoodLoan','BadLoan'))
print(d[1:3,])
mapping <- list(
'A40'='car (new)',
'A41'='car (used)',
'A42'='furniture/equipment',
'A43'='radio/television',
'A44'='domestic appliances',
...
)
mapping <- list(
'A40'='car (new)',
'A41'='car (used)',
'A42'='furniture/equipment',
'A43'='radio/television',
'A44'='domestic appliances',
)
for(i in 1:(dim(d))[2]) {
if(class(d[,i])=='character') {
d[,i] <- as.factor(as.character(mapping[d[,i]]))
}
}
table(d$Purpose,d$Good.Loan)
BadLoan GoodLoan
business 34 63
car (new) 89 145
car (used) 17 86
domestic appliances 4 8
education 22 28
furniture/equipment 58 123
others 5 7
radio/television 62 218
repairs 8 14
retraining 1 8
table(d$Purpose,d$Good.Loan)
library(tidyverse)
library(lubridate)
library(plotly)
library(gganimate)
library(tidycensus)
library(transformr)
library(ggthemes)
library(viridis)
options( scipen = 10 ) # print full numbers, not scientific notation
covid_cases <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
covid_cases <- pivot_longer(covid_cases, 12:length(covid_cases), names_to = "date", values_to = "cases") %>%
mutate(date = lubridate::as_date(date, format = "%m/%d/%y", tz = "UTC"))
# census_api_key(YOUR_API_KEY_HERE, install = TRUE) # installs key to ~/.Renviron for future use
# readRenviron("~/.Renviron") # Only necessary after API key is first installed
population <- tidycensus::get_estimates(geography = "county", "population") %>%
mutate(GEOID = as.integer(GEOID)) %>%
pivot_wider(
names_from = variable,
values_from = value
)
# Per capita calculation is to nearest 5k of median county population
per_capita <- population %>%
summarize(avg = mean(POP)) %>%
unlist() %>%
plyr::round_any(., 1e4)
roll_us_cases <- covid_cases %>%
filter(`Country_Region` == "US" | `Country_Region` == "United States") %>%
filter(Province_State != "Puerto Rico") %>%
filter(FIPS < 80000) %>%
# filter(Province_State != "Alaska" & Province_State != "Hawaii") %>%
filter(Admin2 != "Unassigned") %>%
arrange(date) %>%
group_by(UID) %>%
mutate(prev_count = lag(cases)) %>%
mutate(prev_count = ifelse(is.na(prev_count), 0, prev_count)) %>%
mutate(new_cases = cases - prev_count) %>%
mutate(roll_cases = round(zoo::rollapply(new_cases, 7, mean, fill = 0, align = "right", na.rm = T)))%>%
ungroup() %>%
select(-prev_count) %>%
left_join(
population %>% select(-NAME),
by = c("FIPS" = "GEOID")
) %>%
mutate(
cases_capita = round(cases / POP * per_capita), # cases per 100,000 residents
new_capita = round(new_cases / POP * per_capita), # cases per 100,000 residents
roll_capita = round(roll_cases / POP * per_capita) # rolling new cases per 100,000 residents
)
# tidycensus version
# Includes Alaska and Hawaii as rescaled and shifted
data("county_laea")
data("state_laea")
first_date <- min({ roll_us_cases %>%
group_by(date) %>%
summarize(roll_cases = sum(roll_cases)) %>%
ungroup() %>%
filter(roll_cases > 0) %>%
select(date)
}$date)
temp <- roll_us_cases %>%
filter(date >= first_date) %>%
mutate(roll_capita = ifelse(roll_capita <= 0, 1, roll_capita)) %>% # log10 scale plot
mutate(roll_cases = ifelse(roll_cases <= 0, 1, roll_cases)) # log10 scale plot
temp_sf <- county_laea %>%
mutate(GEOID = as.numeric(GEOID)) %>%
mutate(GEOID = ifelse(GEOID == 46113, 46102, GEOID)) %>% # SD Oglala Lakota County name change
mutate(GEOID = ifelse(GEOID == 2270, 2158, GEOID)) %>% # AK Kusilvak census area
inner_join(temp, by = c("GEOID" = "FIPS"))
days <- NROW(unique(temp$date))
p <- ggplot() +
geom_sf(data = temp_sf, aes(fill = roll_capita), size = 0) +
geom_sf(data = state_laea, fill = "transparent", color = alpha("gray70", 0.25), size = 0.75) +
scale_fill_viridis(
name = "7-day rolling cases: ",
trans = "log10",
option = "plasma",
) +
ggthemes::theme_map() +
theme(legend.position = c(0.5, 0.01), legend.direction = "horizontal") +
labs(
title = paste0("US 7-day rolling average of new COVID cases per ", scales::comma(per_capita), " residents"),
subtitle = "Date: {frame_time}"
) +
transition_time(date)
anim <- animate(
p,
nframes = days + 10 + 30,
fps = 5,
start_pause = 10,
end_pause = 30,
res = 96,
width = 800,
height = 600,
units = "px"
)
# Be sure to insert your own save location here -- a missing directory will cause errors
anim_save("images/us_covid_rolling_cases_plasma.gif", animation = anim)
anim
library(tidyverse)
library(lubridate)
install.packages(c("tidyverse", "lubridate", "plotly", "gganimate", "tidycensus", "transformr", "ggthemes", "viridis"))
library(tidyverse)
library(lubridate)
library(plotly)
library(gganimate)
library(tidycensus)
library(transformr)
library(ggthemes)
library(viridis)
options( scipen = 10 ) # print full numbers, not scientific notation
covid_cases <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
covid_cases <- pivot_longer(covid_cases, 12:length(covid_cases), names_to = "date", values_to = "cases") %>%
mutate(date = lubridate::as_date(date, format = "%m/%d/%y", tz = "UTC"))
# census_api_key(YOUR_API_KEY_HERE, install = TRUE) # installs key to ~/.Renviron for future use
# readRenviron("~/.Renviron") # Only necessary after API key is first installed
population <- tidycensus::get_estimates(geography = "county", "population") %>%
mutate(GEOID = as.integer(GEOID)) %>%
pivot_wider(
names_from = variable,
values_from = value
)
# Per capita calculation is to nearest 5k of median county population
per_capita <- population %>%
summarize(avg = mean(POP)) %>%
unlist() %>%
plyr::round_any(., 1e4)
roll_us_cases <- covid_cases %>%
filter(`Country_Region` == "US" | `Country_Region` == "United States") %>%
filter(Province_State != "Puerto Rico") %>%
filter(FIPS < 80000) %>%
# filter(Province_State != "Alaska" & Province_State != "Hawaii") %>%
filter(Admin2 != "Unassigned") %>%
arrange(date) %>%
group_by(UID) %>%
mutate(prev_count = lag(cases)) %>%
mutate(prev_count = ifelse(is.na(prev_count), 0, prev_count)) %>%
mutate(new_cases = cases - prev_count) %>%
mutate(roll_cases = round(zoo::rollapply(new_cases, 7, mean, fill = 0, align = "right", na.rm = T)))%>%
ungroup() %>%
select(-prev_count) %>%
left_join(
population %>% select(-NAME),
by = c("FIPS" = "GEOID")
) %>%
mutate(
cases_capita = round(cases / POP * per_capita), # cases per 100,000 residents
new_capita = round(new_cases / POP * per_capita), # cases per 100,000 residents
roll_capita = round(roll_cases / POP * per_capita) # rolling new cases per 100,000 residents
)
# tidycensus version
# Includes Alaska and Hawaii as rescaled and shifted
data("county_laea")
data("state_laea")
first_date <- min({ roll_us_cases %>%
group_by(date) %>%
summarize(roll_cases = sum(roll_cases)) %>%
ungroup() %>%
filter(roll_cases > 0) %>%
select(date)
}$date)
temp <- roll_us_cases %>%
filter(date >= first_date) %>%
mutate(roll_capita = ifelse(roll_capita <= 0, 1, roll_capita)) %>% # log10 scale plot
mutate(roll_cases = ifelse(roll_cases <= 0, 1, roll_cases)) # log10 scale plot
temp_sf <- county_laea %>%
mutate(GEOID = as.numeric(GEOID)) %>%
mutate(GEOID = ifelse(GEOID == 46113, 46102, GEOID)) %>% # SD Oglala Lakota County name change
mutate(GEOID = ifelse(GEOID == 2270, 2158, GEOID)) %>% # AK Kusilvak census area
inner_join(temp, by = c("GEOID" = "FIPS"))
days <- NROW(unique(temp$date))
p <- ggplot() +
geom_sf(data = temp_sf, aes(fill = roll_capita), size = 0) +
geom_sf(data = state_laea, fill = "transparent", color = alpha("gray70", 0.25), size = 0.75) +
scale_fill_viridis(
name = "7-day rolling cases: ",
trans = "log10",
option = "plasma",
) +
ggthemes::theme_map() +
theme(legend.position = c(0.5, 0.01), legend.direction = "horizontal") +
labs(
title = paste0("US 7-day rolling average of new COVID cases per ", scales::comma(per_capita), " residents"),
subtitle = "Date: {frame_time}"
) +
transition_time(date)
anim <- animate(
p,
nframes = days + 10 + 30,
fps = 5,
start_pause = 10,
end_pause = 30,
res = 96,
width = 800,
height = 600,
units = "px"
)
# Be sure to insert your own save location here -- a missing directory will cause errors
anim_save("images/us_covid_rolling_cases_plasma.gif", animation = anim)
anim
install.packages("viridis")
read.csv(C:\Users\danie\Downloads\lab4-part-2.zip\birthweight.csv)
read.csv("C:\Users\danie\Downloads\lab4-part-2.zip\birthweight.csv"")
read.csv("C:\Users\danie\Downloads\lab4-part-2.zip\birthweight.csv")
read.csv(C:\Users\danie\Downloads\lab4-part-2\birthweight)
read.csv('birthweight.csv',sep = ';')
birthweight <- read.csv("C:/Users/danie/Downloads/lab4-part-2/birthweight.csv", sep=";")
View(birthweight)
read.csv('birthweight.csv',sep = ';')
read.csv('birthweight.csv')
read.csv(C:\Users\danie\Downloads\lab4-part-2\birthweight.csv)
dat = read.csv("birthweight.csv", header = TRUE)
dat = read.csv("C:\Users\danie\Downloads\lab4-part-2\birthweight.csv", header = TRUE)
getwd()
read.csv('birthweight.csv')
setwd(C:\Users\danie\Documents\R\MA\lab4-part-2)
setwd()
> setwd("C:\Users\danie\Documents\R\MA\lab4-part-2")
read.csv('birthweight.csv')
setwd(C:\Users\danie\Documents\R\MA\lab4-part-2)
setwd(C:/Users/danie/Documents/R/MA/lab4-part-2)
setwd(Users\danie\Documents\R\MA\lab4-part-2)
setwd("~/R/MA/lab4-part-2")
read.csv((birthweight))
read.csv('birthweight.csv',sep = ';')
cor.test(x,y)
cor.test(bw,bpd)
cor(x,y)
plot.default(x,y)
getwd()
my.data <- read.csv(birthweight)
my.data <- read.csv(read.csv('birthweight.csv',sep = ';')
print
my.data <- read.csv(read.csv('birthweight.csv',sep = ';')
read.csv(read.csv('birthweight.csv',sep = ';')
read.csv(read.csv('birthweight.csv',sep = ';')
read.csv('birthweight.csv',sep = ';')
read.csv('birthweight.csv',sep = ';')
mydata <- read.csv("birthweight.csv")
matplot(mydata[, 1], mydata[, -1], type="l")
head(birthweight)
tail(birthweight)
plot(birthweight)
lines(birthweight)
plot(birthweight)
lines(birthweight)
lines(birthweight$bw)
lines(birthweight$bw, birthweight$bpd)
library(birthweight)
corr.test(birthweight.num,
use    = "pairwise",
method = "pearson",
adjust = "none")
install.packages(c("psych", "PerformanceAnalytics", "ggplot2", "rcompanion"))
> corr.test(birthweight.num,
+           use    = "pairwise",
+           method = "pearson",
+           adjust = "none")
> corr.test(birthweight.num,
+           use    = "pairwise",
+           method = "pearson",
+           adjust = "none")
corr.test(birthweight)
corr.test(birthweight.csv)
Data.num = Data[c("Grade", "Weight", "Calories", "Sodium", "Score")]
library(PerformanceAnalytics)
chart.Correlation(Data.num,
method="pearson",
histogram=TRUE,
pch=16)
Data.num = Data[c("Grade", "Weight", "Calories", "Sodium", "Score")]
library(PerformanceAnalytics)
chart.Correlation(birthweight,
method="pearson",
histogram=TRUE,
pch=16)
test
library(PerformanceAnalytics)
>
> chart.Correlation(birthweight,
+                   method="pearson",
+                   histogram=TRUE,
+                   pch=16)
library(PerformanceAnalytics)
>
> chart.Correlation(birthweight,
method="pearson",
+                   histogram=TRUE,
+                   pch=16)
plot(birthweight)
library(psych)
corr.test(birthweight,
use    = "pairwise",
method = "pearson",
adjust = "none")
library(PerformanceAnalytics)
chart.Correlation(birthweight,
method="pearson",
histogram=
library(PerformanceAnalytics)
chart.Correlation(birthweight,
method="pearson",
histogram=TRUE,
pch=16)
library(PerformanceAnalytics)
chart.Correlation(birthweight,
method="pearson",
histogram=TRUE,
pch=16)
library(PerformanceAnalytics)
chart.Correlation(birthweight,
method="pearson",
histogram=TRUE,
pch=16)
library(PerformanceAnalytics)
plot(birthweight,
data=Data,
pch=16)
abline(model,
col = "blue",
lwd = 2)
ibrary(ggplot2)
ggplot(Data)
library(ggplot2)
ggplot(Data)
library(ggplot2)
ggplot(birthweight)
