# Since there are 2 courses (AI and DSA) this produces 2 boxplots of StatsKnowl and we can see
# if there are any differences
boxplot(surveyDF$StatsKnowl ~ surveyDF$MSc,
notch = TRUE,            # Shows the 95% confidence intervals
horizontal = TRUE,
xlab = "Statistical understanding",
ylab = "")
# Side by side boxplots of ProgKnowl separated by the factor MSc.
boxplot(surveyDF$ProgKnowl ~ surveyDF$MSc,
notch = TRUE,           # Shows the 95% confidence intervals
horizontal = TRUE,
xlab = "Programming understanding",
ylab = "")
# To extract all the words into a single character string you need the
# paste() function with the collapse option.
words <- paste(surveyDF$Excite, collapse = " ")
# Display the words
words
# Save the words in a text file as input to a word cloud generator
# You can change the file name
# NB This will overwrite the previous contents (if any)
fileName <- file("MyWords.txt")
writeLines(words, fileName)
close(fileName)
# Compute sales income for Martin's book
price <- 10                                     # assume price is 10 UKP per book copy
numberStudents <- 100                           # number of students in the class
recommend <- 0.5                                # proportion of students who recommend the book
sales <- numberStudents * (1 + recommend)
income <- sales * price
outputMsg <- paste("Martin will earn:", income) # format a readable string with the paste function
print(outputMsg, quote = FALSE)                 # output the concatenated string without quotes
# Your extended code needs to go here
# If a package is installed, it will be loaded and missing package(s) will be installed
# from CRAN and then loaded.
# The packages we need are:
packages = c("tidyverse", "devtools")
# Load the package or install and load it
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install_github("joachim-gassen/tidycovid19")
#Download the data into a data frame called cv.df using the
#download_jhu_csse_covid19_data() function from the {tidycovid19} package.
#
cv.df <- download_jhu_csse_covid19_data(cached = TRUE)
install.packages("tidycovid")
# If a package is installed, it will be loaded and missing package(s) will be installed
# from CRAN and then loaded.
# The packages we need are:
packages = c("tidyverse", "devtools")
# Load the package or install and load it
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install_github("tidycovid19")
# If a package is installed, it will be loaded and missing package(s) will be installed
# from CRAN and then loaded.
# The packages we need are:
packages = c("tidyverse", "devtools")
# Load the package or install and load it
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install_github("https://github.com/joachim-gassen/tidycovid19.git")
library(tidyverse)
library(tidycovid19)
library(zoo)
library(tidycovid19)
#Download the data into a data frame called cv.df using the
#download_jhu_csse_covid19_data() function from the {tidycovid19} package.
#
cv.df <- download_jhu_csse_covid19_data(cached = TRUE)
# select only the UK data
cv.uk.df <- subset(cv.df, iso3c=="GBR")
head(cv.uk.df)
tail(cv.uk.df)
# Compute new deaths as the data shows cumulative deaths
cv.uk.df$new.d[2:nrow(cv.uk.df)] <- tail(cv.uk.df$deaths, -1) - head(cv.uk.df$deaths, -1)
cv.uk.df$new.d[1] <- 0     # Add zero for first row
# Compute new infections
cv.uk.df$new.i[2:nrow(cv.uk.df)] <- tail(cv.uk.df$confirmed, -1) - head(cv.uk.df$confirmed, -1)
cv.uk.df$new.i[1] <- 0     # Add zero for first row
# NB a small span value (<1) makes the loess smoother more wiggly!
ggplot(data = cv.uk.df, aes(x = date, y = new.d)) +
geom_line(color = "skyblue", size = 0.6) +
ylim(0,1200) +
stat_smooth(color = "darkorange", fill = "darkorange", method = "loess", span = 0.2) +
ggtitle("Daily additional deaths in the UK due to covid-19") +
xlab("Date") + ylab("Daily new deaths")
ggsave("cv19_UK_deathrate.png")
ggplot(data = cv.uk.df, aes(x = date, y = new.i)) +
geom_line(color = "skyblue", size = 0.6) +
scale_y_continuous(trans = "log10") +
stat_smooth(color = "darkorange", fill = "darkorange", method = "loess") +
ggtitle("Daily new infections in the UK from covid-19") +
xlab("Date") + ylab("Daily new infections")
ggsave("cv19_UK_infectionrate.png")
is.integer(cv.uk.df$new.i)
cv.uk.df$new.i <- as.integer(cv.uk.df$new.i)
cv.uk.df$new.i <- as.integer(cv.uk.df$new.i)
cv.uk.df$recovered[236] <- 0
# Compute new deaths as the data shows cumulative deaths
cv.uk.df$new.d[2:nrow(cv.uk.df)] <- tail(cv.uk.df$deaths, -1) - head(cv.uk.df$deaths, -1)
cv.uk.df$new.d[1] <- 0     # Add zero for first row
# Compute new infections
cv.uk.df$new.i[2:nrow(cv.uk.df)] <- tail(cv.uk.df$confirmed, -1) - head(cv.uk.df$confirmed, -1)
cv.uk.df$new.i[1] <- 0     # Add zero for first row
# NB a small span value (<1) makes the loess smoother more wiggly!
ggplot(data = cv.uk.df, aes(x = date, y = new.d)) +
geom_line(color = "skyblue", size = 0.6) +
ylim(0,1200) +
stat_smooth(color = "darkorange", fill = "darkorange", method = "loess", span = 0.2) +
ggtitle("Daily additional deaths in the UK due to covid-19") +
xlab("Date") + ylab("Daily new deaths")
ggsave("cv19_UK_deathrate.png")
ggplot(data = cv.uk.df, aes(x = date, y = new.i)) +
geom_line(color = "skyblue", size = 0.6) +
scale_y_continuous(trans = "log10") +
stat_smooth(color = "darkorange", fill = "darkorange", method = "loess") +
ggtitle("Daily new infections in the UK from covid-19") +
xlab("Date") + ylab("Daily new infections")
ggsave("cv19_UK_infectionrate.png")
# We need to read from the {validate} package in the R library into memory
# If you haven't installed it, then you need to run install.packages("validate")
# but do this only once.
library(validate)
install.packages("validate")
# We need to read from the {validate} package in the R library into memory
# If you haven't installed it, then you need to run install.packages("validate")
# but do this only once.
library(validate)
# Store the GitHub address in fname
fname <- "https://raw.githubusercontent.com/mjshepperd/CS5702-Data/master/CS5702_W3_NASAexample.csv"
defectDF <- read.csv(fname, header = TRUE, fileEncoding = 'UTF-8-BOM')
checkResults <- check_that(defectDF, NUMBER_OF_LINES >= LOC_BLANK + LOC_COMMENTS +
LOC_TOTAL)
checkResults
# Take the output from check_that() and turn it into a dataframe f
# or easier manipulation
checkResultsDF <- as.data.frame(checkResults)
problems <- subset(checkResultsDF, value==FALSE)
# Build a rule set (of 2 rules) named rules
rules <- validator(R1 = LOC_CODE_AND_COMMENT >= 0,
R2 = NUMBER_OF_LINES >= (LOC_BLANK + LOC_COMMENTS + LOC_TOTAL))
# Now apply our rule set
checkResults <- confront(defectDF,rules)
checkResultsDF <- as.data.frame(checkResults)
ProbResultsDF <- subset(checkResultsDF, value=="FALSE")
# Code to select the student specific team combination.
# Feel free to change it including the data frame name.
#
# my.2teams.df <- subset(analysis.data, teamID.x=="???" | teamID.x=="???")
BOSLAA = subset(CS5801.data, teamID.x == "BOS" | teamID.x=="LAA")
load("~/R/CoronaShmorona/MA/Ass/CS5801_data.rda")
# Code to select the student specific team combination.
# Feel free to change it including the data frame name.
#
# my.2teams.df <- subset(analysis.data, teamID.x=="???" | teamID.x=="???")
BOSLAA = subset(CS5801.data, teamID.x == "BOS" | teamID.x=="LAA")
BOS = subset(CS5801.data, teamID.x == "BOS")
LAA = subset(CS5801.data, teamID.x == "LAA")
# Code to select the student specific team combination.
# Feel free to change it including the data frame name.
#
# my.2teams.df <- subset(analysis.data, teamID.x=="???" | teamID.x=="???")
BOSLAA = subset(CS5801.data, teamID.x == "BOS" | teamID.x=="LAA")
BOS = subset(CS5801.data, teamID.x == "BOS")
LAA = subset(CS5801.data, teamID.x == "LAA")
League = CS5801.data
summary(League)
summary(BOSLAA)
summary(BOS)
summary(LAA)
# Code to select the student specific team combination.
# Feel free to change it including the data frame name.
#
# my.2teams.df <- subset(analysis.data, teamID.x=="???" | teamID.x=="???")
# Only the two teams need to be separated at this stage, but I also decivded to have subsets including only one team each. The reason is that
BOSLAA = subset(CS5801.data, teamID.x == "BOS" | teamID.x=="LAA")
BOS = subset(CS5801.data, teamID.x == "BOS")
LAA = subset(CS5801.data, teamID.x == "LAA")
League = CS5801.data
summary(League)
summary(BOSLAA)
summary(BOS)
summary(LAA)
col(League)
# Code to select the student specific team combination.
# Feel free to change it including the data frame name.
#
# my.2teams.df <- subset(analysis.data, teamID.x=="???" | teamID.x=="???")
# Only the two teams need to be separated at this stage, but I also decivded to have subsets including only one team each. The reason is that
BOSLAA = subset(CS5801.data, teamID.x == "BOS" | teamID.x=="LAA")
BOS = subset(CS5801.data, teamID.x == "BOS")
LAA = subset(CS5801.data, teamID.x == "LAA")
League = CS5801.data
summary(League)
summary(BOSLAA)
summary(BOS)
summary(LAA)
plot(League)
load("~/R/CoronaShmorona/MA/Ass/CS5801_data.rda")
View(CS5801.data)
defectDF <- read.csv(fname, header = TRUE, fileEncoding = 'UTF-8-BOM')
# We need to read from the {validate} package in the R library into memory
# If you haven't installed it, then you need to run install.packages("validate")
# but do this only once.
library(validate)
# Store the GitHub address in fname
fname <- "https://raw.githubusercontent.com/mjshepperd/CS5702-Data/master/CS5702_W3_NASAexample.csv"
defectDF <- read.csv(fname, header = TRUE, fileEncoding = 'UTF-8-BOM')
defectDF <- read.csv("https://raw.githubusercontent.com/mjshepperd/CS5702-Data/master/CS5702_W3_NASAexample.csv", header = TRUE, fileEncoding = 'UTF-8-BOM')
# We need to read from the {validate} package in the R library into memory
# If you haven't installed it, then you need to run install.packages("validate")
# but do this only once.
library(validate)
# Store the GitHub address in fname
fname <- "https://raw.githubusercontent.com/mjshepperd/CS5702-Data/master/CS5702_W3_NASAexample.csv"
defectDF <- read.csv(fname, header = TRUE, fileEncoding = 'UTF-8-BOM')
checkResults <- check_that(defectDF, NUMBER_OF_LINES >= LOC_BLANK + LOC_COMMENTS +
LOC_TOTAL)
checkResults
checkResults <- check_that(defectDF, NUMBER_OF_LINES >= LOC_BLANK + LOC_COMMENTS +
LOC_TOTAL)
checkResults
checkResults <- check_that(League, NUMBER_OF_LINES >= LOC_BLANK + LOC_COMMENTS +
LOC_TOTAL)
checkResults
checkResults <- check_that(BOSLAA, NUMBER_OF_LINES >= LOC_BLANK + LOC_COMMENTS +
LOC_TOTAL)
checkResults
View(defectDF)
View(defectDF)
checkResults <- check_that(BOSLAA, NUMBER_OF_LINES >= G + R + H)
checkResults
checkResults <- check_that(LAA, NUMBER_OF_LINES >= G + R + H)
checkResults
checkResults <- check_that(BOS, NUMBER_OF_LINES >= G + R + H)
checkResults
checkResults <- check_that(BOS, AB >= G + R + H)
checkResults
checkResults <- check_that(BOS, AB >= G + R + H)
checkResults
checkResults <- check_that(League, AB >= G + R + H)
checkResults
checkResults <- check_that(BOSLAA, AB >= G + R + H)
checkResults
checkResults <- check_that(LAA, AB >= G + R + H)
checkResults
checkResults <- check_that(BOS, AB >= G + R + H)
checkResults
# Take the output from check_that() and turn it into a dataframe f
# or easier manipulation
checkResultsDF <- as.data.frame(checkResults)
problems <- subset(checkResultsDF, value==FALSE)
# Build a rule set (of 2 rules) named rules
rules <- validator(R1 = LOC_CODE_AND_COMMENT >= 0,
R2 = NUMBER_OF_LINES >= (LOC_BLANK + LOC_COMMENTS + LOC_TOTAL))
# Now apply our rule set
checkResults <- confront(defectDF,rules)
checkResultsDF <- as.data.frame(checkResults)
ProbResultsDF <- subset(checkResultsDF, value=="FALSE")
# We need to read from the {validate} package in the R library into memory
# If you haven't installed it, then you need to run install.packages("validate")
# but do this only once.
library(validate)
# Store the GitHub address in fname
fname <- "https://raw.githubusercontent.com/mjshepperd/CS5702-Data/master/CS5702_W3_NASAexample.csv"
checkleague <- check_that(League, 968 >= teamid.x)
checkResults
checkleague <- check_that(League, 968 >= G)
checkResults
checkleague <- check_that(League, 968 >= salary)
checkResults
checkleague <- check_that(League, 40 >= salary)
checkResults
checkleague <- check_that(League, 986 >= salary)
checkleague
checkleague <- check_that(League, 968 >= salary)
checkleague
checkleague <- check_that(League, 968 >= teamid.x)
checkleague
checkleague <- check_that(League, 968 >= teamID.x)
checkleague
View(problems)
checkResults <- check_that(defectDF, NUMBER_OF_LINES >= LOC_BLANK + LOC_COMMENTS +
LOC_TOTAL)
checkResults
# Take the output from check_that() and turn it into a dataframe f
# or easier manipulation
checkResultsDF <- as.data.frame(checkResults)
problems <- subset(checkResultsDF, value==FALSE)
View(problems)
# Take the output from check_that() and turn it into a dataframe f
# or easier manipulation
checkResultsDF <- as.data.frame(checkResults)
problems <- subset(checkResultsDF, value==FALSE)
# Build a rule set (of 2 rules) named rules
rules <- validator(R1 = LOC_CODE_AND_COMMENT >= 0,
R2 = NUMBER_OF_LINES >= (LOC_BLANK + LOC_COMMENTS + LOC_TOTAL))
# Now apply our rule set
checkResults <- confront(defectDF,rules)
checkResultsDF <- as.data.frame(checkResults)
View(checkResultsDF)
View(problems)
# Build a rule set (of 2 rules) named rules
rules <- validator(R1 = LOC_CODE_AND_COMMENT >= 0,
R2 = NUMBER_OF_LINES >= (LOC_BLANK + LOC_COMMENTS + LOC_TOTAL))
# Now apply our rule set
checkResults <- confront(defectDF,rules)
checkResultsDF <- as.data.frame(checkResults)
ProbResultsDF <- subset(checkResultsDF, value=="FALSE")
View(ProbResultsDF)
# Load required libraries
library(validate)
# Load from GitHub repo
load(url("https://raw.githubusercontent.com/mjshepperd/CS5702-Data/master/CS5702_W7_DataQualExample.Rda"))
# Check the structure of the data frame
str(dataQualEg1.DF)
summary(dataQualEg1.DF)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 0, age > 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
dataQualEg1.DF$married[dataQualEg1.DF$married == "n"] <- "N"
table(dataQualEg1.DF$married)
nrow(dataQualEg1.DF)
table(dataQualEg1.DF$married)
val.check1 <- check_that(dataQualEg1.DF, age > 0, age < 115, married == "Y" | married == "N")
val.check1 <- check_that(dataQualEg1.DF, age > 0, age < 115, married == "Y" | married == "N")
val.check1 <- check_that(dataQualEg1.DF,
age > 0,
age < 115,
married == "Y" | married == "N",
if (married == "Y") age > 17)   # check married people are adults
nrow(dataQualEg1.DF)
nrow(dataQualEg1.DF)|
length((dataQualEg1.DF$age))
nrow(dataQualEg1.DF)|
nrow(dataQualEg1.DF)
summary(dataQualEg1.DF)
View(dataQualEg1.DF)
table(dataQualEg1.DF$married)
table(dataQualEg1.DF$married)
table(dataQualEg1.DF$agea)
table(dataQualEg1.DF$married)
table(dataQualEg1.DF$age)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 0, age > 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 16, age > 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 0, age > 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 16, age > 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 16, age < 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 16, age < 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
View(League)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns > 0, LeagueGames > 0, LeagueBats == "R" | LeagueBats == "L")
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns > 0, LeagueGames > 0, LeagueBats == "R" | LeagueBats == "L")
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 16, age < 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 16, age < 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
#1
LeagueGames = League$G
BOSLAAGames = BOSLAA$G
BOSGames = BOS$G
LAAGames = LAA$G
#2
LeagueRuns = League$R
BOSLAARuns = BOSLAA$R
BOSRuns = BOS$R
LAARuns = LAA$R
#3
LeagueHits = League$H
BOSLAAHits = BOSLAA$H
BOSHits = BOS$H
LAAHits = LAA$H
#4
LeagueAtBat = League$AB
BOSLAAAtBat = BOSLAA$AB
BOSAtBat = BOS$AB
LAAAtBat = LAA$AB
#5
LeagueRunsBatted = League$RBI
BOSLAARunsBatted = BOSLAA$RBI
BOSRunsBatted = BOS$RBI
LAARunsBatted = LAA$RBI
#6
LeagueWeight = League$weight
BOSLAAWeight = BOSLAA$weight
BOSWeight = BOS$weight
LAAWeight = LAA$weight
#7
LeagueHeight = League$height
BOSLAAHeight = BOSLAA$height
BOSHeight = BOS$height
LAAHeight = LAA$height
#8
LeagueSalary = League$salary
BOSLAASalary = BOSLAA$salary
BOSSalary = BOS$salary
LAASalary = LAA$salary
#9
LeagueBirth = League$birthDate
BOSLAABirth = BOSLAA$birthDate
BOSBirth = BOS$birthDate
LAABirth = LAA$birthDate
#10
LeagueCareer = League$career.length
BOSLAACareer = BOSLAA$career.length
BOSCareer = BOS$career.length
LAACareer = LAA$career.length
#11
LeagueBats = League$bats
BOSLAABats = BOSLAA$bats
BOSBats = BOS$bats
LAABats = LAA$bats
#12
LeagueAge = League$age
BOSLAAAge = BOSLAA$age
BOSAge = BOS$age
LAAAge = LAA$age
#13
LeagueSeasonHit = League$hit.ind
BOSLAASeasonHit = BOSLAA$hit.ind
BOSSeasonHit = BOS$hit.ind
LAASeasonHit = LAA$hit.ind
#these names will late rbe added
#Runs = R
#Hits = H
#AtBat = AB
#RunsBatted = RBI
#LeagueHit= hist.ind
median(LeagueGames)
median(BOSLAAGames)
median(BOSGames)
median(LAAGames)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns > 0, LeagueGames > 0, LeagueBats == "R" | LeagueBats == "L")
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns >= 0, LeagueGames >= 0, LeagueBats == "R" | LeagueBats == "L")
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns >= 0, LeagueGames >= 0, LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueAge > 0,  LeagueRuns >= 0, LeagueGames >= 0, LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
dataQualEg1.DF$married[dataQualEg1.DF$married == "n"] <- "N"
table(dataQualEg1.DF$married)
dataQualEg1.DF$married[dataQualEg1.DF$married == "n"] <- "N"
dataQualEg1.DF$married[dataQualEg1.DF$married == "Y"] <- "Y "
table(dataQualEg1.DF$married)
dataQualEg1.DF$married[dataQualEg1.DF$married == "n"] <- "N"
table(dataQualEg1.DF$married)
val.check1 <- check_that(dataQualEg1.DF,
age > 0,
age < 115,
married == "Y" | married == "N",
if (married == "Y") age > 17)   # check married people are adults
checkleague <- check_that(League, 968 >= teamID.x)
checkleague
