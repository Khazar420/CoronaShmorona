BOSAtBat = BOS$AB
LAAAtBat = LAA$AB
#5
LeagueRunsBatted = League$RBI
BOSLAARunsBatted = BOSLAA$RBI
BOSRunsBatted = BOS$RBI
LAARunsBatted = LAA$RBI
#6
LeagueWeight = League$weight
BOSLAAWeight = BOSLAA$weight
BOSWeight = BOS$weight
LAAWeight = LAA$weight
#7
LeagueHeight = League$height
BOSLAAHeight = BOSLAA$height
BOSHeight = BOS$height
LAAHeight = LAA$height
#8
LeagueSalary = League$salary
BOSLAASalary = BOSLAA$salary
BOSSalary = BOS$salary
LAASalary = LAA$salary
#9
LeagueBirth = League$birthDate
BOSLAABirth = BOSLAA$birthDate
BOSBirth = BOS$birthDate
LAABirth = LAA$birthDate
#10
LeagueCareer = League$career.length
BOSLAACareer = BOSLAA$career.length
BOSCareer = BOS$career.length
LAACareer = LAA$career.length
#11
LeagueBats = League$bats
BOSLAABats = BOSLAA$bats
BOSBats = BOS$bats
LAABats = LAA$bats
#12
LeagueAge = League$age
BOSLAAAge = BOSLAA$age
BOSAge = BOS$age
LAAAge = LAA$age
#13
LeagueSeasonHit = League$hit.ind
BOSLAASeasonHit = BOSLAA$hit.ind
BOSSeasonHit = BOS$hit.ind
LAASeasonHit = LAA$hit.ind
#these names will late rbe added
#Runs = R
#Hits = H
#AtBat = AB
#RunsBatted = RBI
#LeagueHit= hist.ind
median(LeagueGames)
median(BOSLAAGames)
median(BOSGames)
median(LAAGames)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns > 0, LeagueGames > 0, LeagueBats == "R" | LeagueBats == "L")
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns >= 0, LeagueGames >= 0, LeagueBats == "R" | LeagueBats == "L")
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns >= 0, LeagueGames >= 0, LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueAge > 0,  LeagueRuns >= 0, LeagueGames >= 0, LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
dataQualEg1.DF$married[dataQualEg1.DF$married == "n"] <- "N"
table(dataQualEg1.DF$married)
dataQualEg1.DF$married[dataQualEg1.DF$married == "n"] <- "N"
dataQualEg1.DF$married[dataQualEg1.DF$married == "Y"] <- "Y "
table(dataQualEg1.DF$married)
dataQualEg1.DF$married[dataQualEg1.DF$married == "n"] <- "N"
table(dataQualEg1.DF$married)
val.check1 <- check_that(dataQualEg1.DF,
age > 0,
age < 115,
married == "Y" | married == "N",
if (married == "Y") age > 17)   # check married people are adults
checkleague <- check_that(League, 968 >= teamID.x)
checkleague
View(League)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns> 0,
LeagueGames > 0,
LeagueHeight > 0
LeagueAge > 0,
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns> 0,
LeagueGames > 0,
LeagueHits > 0,
LeagueAtBat > 0,
LeagueRunsBatted > 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer > 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
library(ggplot2)
library(dplyr)
library(dbplyr)
library(foreign)
library(ggpubr)
library(xtable)
library(mgcv)
library(tree)
library(validate)
structure(CS5801.data)
glimpse(CS5801.data)
#1
LeagueGames = League$G
BOSLAAGames = BOSLAA$G
BOSGames = BOS$G
LAAGames = LAA$G
#2
LeagueRuns = League$R
BOSLAARuns = BOSLAA$R
BOSRuns = BOS$R
LAARuns = LAA$R
#3
LeagueHits = League$H
BOSLAAHits = BOSLAA$H
BOSHits = BOS$H
LAAHits = LAA$H
#4
LeagueAtBat = League$AB
BOSLAAAtBat = BOSLAA$AB
BOSAtBat = BOS$AB
LAAAtBat = LAA$AB
#5
LeagueRunsBatted = League$RBI
BOSLAARunsBatted = BOSLAA$RBI
BOSRunsBatted = BOS$RBI
LAARunsBatted = LAA$RBI
#6
LeagueWeight = League$weight
BOSLAAWeight = BOSLAA$weight
BOSWeight = BOS$weight
LAAWeight = LAA$weight
#7
LeagueHeight = League$height
BOSLAAHeight = BOSLAA$height
BOSHeight = BOS$height
LAAHeight = LAA$height
#8
LeagueSalary = League$salary
BOSLAASalary = BOSLAA$salary
BOSSalary = BOS$salary
LAASalary = LAA$salary
#9
LeagueBirth = League$birthDate
BOSLAABirth = BOSLAA$birthDate
BOSBirth = BOS$birthDate
LAABirth = LAA$birthDate
#10
LeagueCareer = League$career.length
BOSLAACareer = BOSLAA$career.length
BOSCareer = BOS$career.length
LAACareer = LAA$career.length
#11
LeagueBats = League$bats
BOSLAABats = BOSLAA$bats
BOSBats = BOS$bats
LAABats = LAA$bats
#12
LeagueAge = League$age
BOSLAAAge = BOSLAA$age
BOSAge = BOS$age
LAAAge = LAA$age
#13
LeagueSeasonHit = League$hit.ind
BOSLAASeasonHit = BOSLAA$hit.ind
BOSSeasonHit = BOS$hit.ind
LAASeasonHit = LAA$hit.ind
#these names will late rbe added
#Runs = R
#Hits = H
#AtBat = AB
#RunsBatted = RBI
#LeagueHit= hist.ind
median(LeagueGames)
median(BOSLAAGames)
median(BOSGames)
median(LAAGames)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns> 0,
LeagueGames > 0,
LeagueHits > 0,
LeagueAtBat > 0,
LeagueRunsBatted > 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer > 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames= > 0,
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames=> 0,
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted > 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer > 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer > 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer >= 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer >= 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
anova(League)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer >= 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
anova(CS5801.data)
BOSLAACheck <- check_that(BOSLAA,
BOSLAACareer>= 0,
BOSLAARunsBatted>= 0,
BOSLAAGames >= 0,
BOSLAARuns >= 0)
# Produce a bar chart of the quality rule failures
barplot(BOSLAACheck)
summary(BOSLAA)
BOSLAACheck <- check_that(BOSLAA,
BOSLAACareer>= 0,
BOSLAARunsBatted>= 0,
BOSLAAGames >= 0,
BOSLAARuns >= 0)
# Produce a bar chart of the quality rule failures
barplot(BOSLAACheck)
LAACheck <- check_that(LAA,
BOSLAARunsBatted>= 0,)
LAACheck <- check_that(LAA,
LAARunsBatted>= 0)
barplot(LAACheck)
BOSCheck <- check_that(BOS,
BOSRunsBatted>= 0)
barplot(BOSCheck)
hist(BOSBats)
hist(BOSCareer)
View(BOSLAA)
plot(BOSCareer)
anova(BOSCareer)
anova(CS5801.data)
plot(league)
plot(League)
plot(League)
hist(League)
plot(League)
hist(LeagueAge)
summary(BOSLAA)
hist(LeagueAge)
summary(BOSLAA)
hist(BOSLAARuns)
val.check1 <- check_that(dataQualEg1.DF,
age > 0,
age < 115,
married == "Y" | married == "N",
if (married == "Y") age > 17)   # check married people are adults
library(readr)
titanic_all_cols <- read_csv("~/R/CoronaShmorona/MA/5701 Labs/7/qda-lab-7-independent-practice/titanic-all-cols.csv")
View(titanic_all_cols)
library(readr)
titanic_analysis <- read_csv("~/R/CoronaShmorona/MA/5701 Labs/7/qda-lab-7-independent-practice/titanic-analysis.csv")
View(titanic_analysis)
library(ggplot2)
summary(titanic)
titanic<-read.csv("data/titanic-analysis.csv")
titanic<-titanic_analysis)
titanic<-titanic_analysis
summary(titanic)
titanic$Survived<-as.factor(titanic$Survived)
summary(titanic)
summary(titanic)
as.factor(LeagueRuns)
LeagueRuns
ggplot(titanic, aes(x=Age)) + geom_histogram(bins=20) +ggtitle("Histogram for Age of Passenger")
ggplot(titanic, aes(x=Fare)) + geom_histogram(bins=20) +ggtitle("Histogram for Fare Passenger")
ggplot(titanic, aes(x=Fare, y=Age)) + geom_point() +ggtitle("Scatter plot of Age and Fare")
ggplot(titanic, aes(x=Survived, y=Age)) + geom_boxplot()
ggplot(titanic, aes(x=Survived, y=Fare)) + geom_boxplot()
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer >= 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Add code here to load any required libraries with `library()`.
# We suggest you use `install.package()` for any required packages externally to this document
# since installation only need be done once.
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dbplyr")
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
library(dbplyr)
library(foreign)
library(ggpubr)
library(xtable)
library(mgcv)
library(tree)
library(validate)
# Code to select the student specific team combination.
# Feel free to change it including the data frame name.
#
# my.2teams.df <- subset(analysis.data, teamID.x=="???" | teamID.x=="???")
# Only the two teams need to be separated at this stage, but I also decivded to have subsets including only one team each. The reason is that
BOSLAA = subset(CS5801.data, teamID.x == "BOS" | teamID.x=="LAA")
BOS = subset(CS5801.data, teamID.x == "BOS")
LAA = subset(CS5801.data, teamID.x == "LAA")
League = CS5801.data
summary(League)
summary(BOSLAA)
summary(BOS)
summary(LAA)
structure(CS5801.data)
glimpse(CS5801.data)
#1
LeagueGames = League$G
BOSLAAGames = BOSLAA$G
BOSGames = BOS$G
LAAGames = LAA$G
#2
LeagueRuns = League$R
BOSLAARuns = BOSLAA$R
BOSRuns = BOS$R
LAARuns = LAA$R
#3
LeagueHits = League$H
BOSLAAHits = BOSLAA$H
BOSHits = BOS$H
LAAHits = LAA$H
#4
LeagueAtBat = League$AB
BOSLAAAtBat = BOSLAA$AB
BOSAtBat = BOS$AB
LAAAtBat = LAA$AB
#5
LeagueRunsBatted = League$RBI
BOSLAARunsBatted = BOSLAA$RBI
BOSRunsBatted = BOS$RBI
LAARunsBatted = LAA$RBI
#6
LeagueWeight = League$weight
BOSLAAWeight = BOSLAA$weight
BOSWeight = BOS$weight
LAAWeight = LAA$weight
#7
LeagueHeight = League$height
BOSLAAHeight = BOSLAA$height
BOSHeight = BOS$height
LAAHeight = LAA$height
#8
LeagueSalary = League$salary
BOSLAASalary = BOSLAA$salary
BOSSalary = BOS$salary
LAASalary = LAA$salary
#9
LeagueBirth = League$birthDate
BOSLAABirth = BOSLAA$birthDate
BOSBirth = BOS$birthDate
LAABirth = LAA$birthDate
#10
LeagueCareer = League$career.length
BOSLAACareer = BOSLAA$career.length
BOSCareer = BOS$career.length
LAACareer = LAA$career.length
#11
LeagueBats = League$bats
BOSLAABats = BOSLAA$bats
BOSBats = BOS$bats
LAABats = LAA$bats
#12
LeagueAge = League$age
BOSLAAAge = BOSLAA$age
BOSAge = BOS$age
LAAAge = LAA$age
#13
LeagueSeasonHit = League$hit.ind
BOSLAASeasonHit = BOSLAA$hit.ind
BOSSeasonHit = BOS$hit.ind
LAASeasonHit = LAA$hit.ind
#these names will late rbe added
#Runs = R
#Hits = H
#AtBat = AB
#RunsBatted = RBI
#LeagueHit= hist.ind
median(LeagueGames)
median(BOSLAAGames)
median(BOSGames)
median(LAAGames)
ggplot(League, aes(x=LeagueSeasonHit, y=LeagueSalary)) + geom_boxplot()
LeagueSeasonHit
ggplot(League, aes(x=LeagueSeasonHit, y=LeagueAge)) + geom_boxplot()
ggplot(League, aes(x=hit.ind, y=LeagueAge)) + geom_boxplot()
titanic$Survived<-as.factor(titanic$Survived)
ggplot(titanic, aes(x=Age)) + geom_histogram(bins=20) +ggtitle("Histogram for Age of Passenger")
ggplot(titanic, aes(x=Fare)) + geom_histogram(bins=20) +ggtitle("Histogram for Fare Passenger")
ggplot(titanic, aes(x=Fare, y=Age)) + geom_point() +ggtitle("Scatter plot of Age and Fare")
ggplot(titanic, aes(x=Survived, y=Age)) + geom_boxplot()
ggplot(titanic, aes(x=Survived, y=Fare)) + geom_boxplot()
titanic.glm<-glm(titanic$Survived~titanic$Age+titanic$Sex+titanic$Fare, family = "binomial")
summary(titanic.glm)
ggplot(League, aes(x=LeagueBats, y=LeagueAge)) + geom_boxplot()
ggplot(League, aes(x=LeagueBats, y=LeagueSalary)) + geom_boxplot()
exp(coef(titanic.glm))
