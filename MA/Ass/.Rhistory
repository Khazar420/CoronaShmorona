checkResults <- check_that(League, AB >= G + R + H)
checkResults
checkResults <- check_that(BOSLAA, AB >= G + R + H)
checkResults
checkResults <- check_that(LAA, AB >= G + R + H)
checkResults
checkResults <- check_that(BOS, AB >= G + R + H)
checkResults
# Take the output from check_that() and turn it into a dataframe f
# or easier manipulation
checkResultsDF <- as.data.frame(checkResults)
problems <- subset(checkResultsDF, value==FALSE)
# Build a rule set (of 2 rules) named rules
rules <- validator(R1 = LOC_CODE_AND_COMMENT >= 0,
R2 = NUMBER_OF_LINES >= (LOC_BLANK + LOC_COMMENTS + LOC_TOTAL))
# Now apply our rule set
checkResults <- confront(defectDF,rules)
checkResultsDF <- as.data.frame(checkResults)
ProbResultsDF <- subset(checkResultsDF, value=="FALSE")
# We need to read from the {validate} package in the R library into memory
# If you haven't installed it, then you need to run install.packages("validate")
# but do this only once.
library(validate)
# Store the GitHub address in fname
fname <- "https://raw.githubusercontent.com/mjshepperd/CS5702-Data/master/CS5702_W3_NASAexample.csv"
checkleague <- check_that(League, 968 >= teamid.x)
checkResults
checkleague <- check_that(League, 968 >= G)
checkResults
checkleague <- check_that(League, 968 >= salary)
checkResults
checkleague <- check_that(League, 40 >= salary)
checkResults
checkleague <- check_that(League, 986 >= salary)
checkleague
checkleague <- check_that(League, 968 >= salary)
checkleague
checkleague <- check_that(League, 968 >= teamid.x)
checkleague
checkleague <- check_that(League, 968 >= teamID.x)
checkleague
View(problems)
checkResults <- check_that(defectDF, NUMBER_OF_LINES >= LOC_BLANK + LOC_COMMENTS +
LOC_TOTAL)
checkResults
# Take the output from check_that() and turn it into a dataframe f
# or easier manipulation
checkResultsDF <- as.data.frame(checkResults)
problems <- subset(checkResultsDF, value==FALSE)
View(problems)
# Take the output from check_that() and turn it into a dataframe f
# or easier manipulation
checkResultsDF <- as.data.frame(checkResults)
problems <- subset(checkResultsDF, value==FALSE)
# Build a rule set (of 2 rules) named rules
rules <- validator(R1 = LOC_CODE_AND_COMMENT >= 0,
R2 = NUMBER_OF_LINES >= (LOC_BLANK + LOC_COMMENTS + LOC_TOTAL))
# Now apply our rule set
checkResults <- confront(defectDF,rules)
checkResultsDF <- as.data.frame(checkResults)
View(checkResultsDF)
View(problems)
# Build a rule set (of 2 rules) named rules
rules <- validator(R1 = LOC_CODE_AND_COMMENT >= 0,
R2 = NUMBER_OF_LINES >= (LOC_BLANK + LOC_COMMENTS + LOC_TOTAL))
# Now apply our rule set
checkResults <- confront(defectDF,rules)
checkResultsDF <- as.data.frame(checkResults)
ProbResultsDF <- subset(checkResultsDF, value=="FALSE")
View(ProbResultsDF)
# Load required libraries
library(validate)
# Load from GitHub repo
load(url("https://raw.githubusercontent.com/mjshepperd/CS5702-Data/master/CS5702_W7_DataQualExample.Rda"))
# Check the structure of the data frame
str(dataQualEg1.DF)
summary(dataQualEg1.DF)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 0, age > 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
dataQualEg1.DF$married[dataQualEg1.DF$married == "n"] <- "N"
table(dataQualEg1.DF$married)
nrow(dataQualEg1.DF)
table(dataQualEg1.DF$married)
val.check1 <- check_that(dataQualEg1.DF, age > 0, age < 115, married == "Y" | married == "N")
val.check1 <- check_that(dataQualEg1.DF, age > 0, age < 115, married == "Y" | married == "N")
val.check1 <- check_that(dataQualEg1.DF,
age > 0,
age < 115,
married == "Y" | married == "N",
if (married == "Y") age > 17)   # check married people are adults
nrow(dataQualEg1.DF)
nrow(dataQualEg1.DF)|
length((dataQualEg1.DF$age))
nrow(dataQualEg1.DF)|
nrow(dataQualEg1.DF)
summary(dataQualEg1.DF)
View(dataQualEg1.DF)
table(dataQualEg1.DF$married)
table(dataQualEg1.DF$married)
table(dataQualEg1.DF$agea)
table(dataQualEg1.DF$married)
table(dataQualEg1.DF$age)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 0, age > 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 16, age > 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 0, age > 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 16, age > 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 16, age < 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 16, age < 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
View(League)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns > 0, LeagueGames > 0, LeagueBats == "R" | LeagueBats == "L")
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns > 0, LeagueGames > 0, LeagueBats == "R" | LeagueBats == "L")
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 16, age < 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 16, age < 115, married == "Y" | married == "N")
# Produce a bar chart of the quality rule failures
barplot(val.check1)
#1
LeagueGames = League$G
BOSLAAGames = BOSLAA$G
BOSGames = BOS$G
LAAGames = LAA$G
#2
LeagueRuns = League$R
BOSLAARuns = BOSLAA$R
BOSRuns = BOS$R
LAARuns = LAA$R
#3
LeagueHits = League$H
BOSLAAHits = BOSLAA$H
BOSHits = BOS$H
LAAHits = LAA$H
#4
LeagueAtBat = League$AB
BOSLAAAtBat = BOSLAA$AB
BOSAtBat = BOS$AB
LAAAtBat = LAA$AB
#5
LeagueRunsBatted = League$RBI
BOSLAARunsBatted = BOSLAA$RBI
BOSRunsBatted = BOS$RBI
LAARunsBatted = LAA$RBI
#6
LeagueWeight = League$weight
BOSLAAWeight = BOSLAA$weight
BOSWeight = BOS$weight
LAAWeight = LAA$weight
#7
LeagueHeight = League$height
BOSLAAHeight = BOSLAA$height
BOSHeight = BOS$height
LAAHeight = LAA$height
#8
LeagueSalary = League$salary
BOSLAASalary = BOSLAA$salary
BOSSalary = BOS$salary
LAASalary = LAA$salary
#9
LeagueBirth = League$birthDate
BOSLAABirth = BOSLAA$birthDate
BOSBirth = BOS$birthDate
LAABirth = LAA$birthDate
#10
LeagueCareer = League$career.length
BOSLAACareer = BOSLAA$career.length
BOSCareer = BOS$career.length
LAACareer = LAA$career.length
#11
LeagueBats = League$bats
BOSLAABats = BOSLAA$bats
BOSBats = BOS$bats
LAABats = LAA$bats
#12
LeagueAge = League$age
BOSLAAAge = BOSLAA$age
BOSAge = BOS$age
LAAAge = LAA$age
#13
LeagueSeasonHit = League$hit.ind
BOSLAASeasonHit = BOSLAA$hit.ind
BOSSeasonHit = BOS$hit.ind
LAASeasonHit = LAA$hit.ind
#these names will late rbe added
#Runs = R
#Hits = H
#AtBat = AB
#RunsBatted = RBI
#LeagueHit= hist.ind
median(LeagueGames)
median(BOSLAAGames)
median(BOSGames)
median(LAAGames)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns > 0, LeagueGames > 0, LeagueBats == "R" | LeagueBats == "L")
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns >= 0, LeagueGames >= 0, LeagueBats == "R" | LeagueBats == "L")
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueRuns >= 0, LeagueGames >= 0, LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
LeagueCheck <- check_that(League, LeagueAge > 0,  LeagueRuns >= 0, LeagueGames >= 0, LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
dataQualEg1.DF$married[dataQualEg1.DF$married == "n"] <- "N"
table(dataQualEg1.DF$married)
dataQualEg1.DF$married[dataQualEg1.DF$married == "n"] <- "N"
dataQualEg1.DF$married[dataQualEg1.DF$married == "Y"] <- "Y "
table(dataQualEg1.DF$married)
dataQualEg1.DF$married[dataQualEg1.DF$married == "n"] <- "N"
table(dataQualEg1.DF$married)
val.check1 <- check_that(dataQualEg1.DF,
age > 0,
age < 115,
married == "Y" | married == "N",
if (married == "Y") age > 17)   # check married people are adults
checkleague <- check_that(League, 968 >= teamID.x)
checkleague
View(League)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns> 0,
LeagueGames > 0,
LeagueHeight > 0
LeagueAge > 0,
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns> 0,
LeagueGames > 0,
LeagueHits > 0,
LeagueAtBat > 0,
LeagueRunsBatted > 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer > 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
library(ggplot2)
library(dplyr)
library(dbplyr)
library(foreign)
library(ggpubr)
library(xtable)
library(mgcv)
library(tree)
library(validate)
structure(CS5801.data)
glimpse(CS5801.data)
#1
LeagueGames = League$G
BOSLAAGames = BOSLAA$G
BOSGames = BOS$G
LAAGames = LAA$G
#2
LeagueRuns = League$R
BOSLAARuns = BOSLAA$R
BOSRuns = BOS$R
LAARuns = LAA$R
#3
LeagueHits = League$H
BOSLAAHits = BOSLAA$H
BOSHits = BOS$H
LAAHits = LAA$H
#4
LeagueAtBat = League$AB
BOSLAAAtBat = BOSLAA$AB
BOSAtBat = BOS$AB
LAAAtBat = LAA$AB
#5
LeagueRunsBatted = League$RBI
BOSLAARunsBatted = BOSLAA$RBI
BOSRunsBatted = BOS$RBI
LAARunsBatted = LAA$RBI
#6
LeagueWeight = League$weight
BOSLAAWeight = BOSLAA$weight
BOSWeight = BOS$weight
LAAWeight = LAA$weight
#7
LeagueHeight = League$height
BOSLAAHeight = BOSLAA$height
BOSHeight = BOS$height
LAAHeight = LAA$height
#8
LeagueSalary = League$salary
BOSLAASalary = BOSLAA$salary
BOSSalary = BOS$salary
LAASalary = LAA$salary
#9
LeagueBirth = League$birthDate
BOSLAABirth = BOSLAA$birthDate
BOSBirth = BOS$birthDate
LAABirth = LAA$birthDate
#10
LeagueCareer = League$career.length
BOSLAACareer = BOSLAA$career.length
BOSCareer = BOS$career.length
LAACareer = LAA$career.length
#11
LeagueBats = League$bats
BOSLAABats = BOSLAA$bats
BOSBats = BOS$bats
LAABats = LAA$bats
#12
LeagueAge = League$age
BOSLAAAge = BOSLAA$age
BOSAge = BOS$age
LAAAge = LAA$age
#13
LeagueSeasonHit = League$hit.ind
BOSLAASeasonHit = BOSLAA$hit.ind
BOSSeasonHit = BOS$hit.ind
LAASeasonHit = LAA$hit.ind
#these names will late rbe added
#Runs = R
#Hits = H
#AtBat = AB
#RunsBatted = RBI
#LeagueHit= hist.ind
median(LeagueGames)
median(BOSLAAGames)
median(BOSGames)
median(LAAGames)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns> 0,
LeagueGames > 0,
LeagueHits > 0,
LeagueAtBat > 0,
LeagueRunsBatted > 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer > 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames= > 0,
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames=> 0,
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted > 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer > 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer > 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer >= 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer >= 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
anova(League)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer >= 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
anova(CS5801.data)
BOSLAACheck <- check_that(BOSLAA,
BOSLAACareer>= 0,
BOSLAARunsBatted>= 0,
BOSLAAGames >= 0,
BOSLAARuns >= 0)
# Produce a bar chart of the quality rule failures
barplot(BOSLAACheck)
summary(BOSLAA)
BOSLAACheck <- check_that(BOSLAA,
BOSLAACareer>= 0,
BOSLAARunsBatted>= 0,
BOSLAAGames >= 0,
BOSLAARuns >= 0)
# Produce a bar chart of the quality rule failures
barplot(BOSLAACheck)
LAACheck <- check_that(LAA,
BOSLAARunsBatted>= 0,)
LAACheck <- check_that(LAA,
LAARunsBatted>= 0)
barplot(LAACheck)
BOSCheck <- check_that(BOS,
BOSRunsBatted>= 0)
barplot(BOSCheck)
hist(BOSBats)
hist(BOSCareer)
View(BOSLAA)
plot(BOSCareer)
anova(BOSCareer)
anova(CS5801.data)
plot(league)
plot(League)
plot(League)
hist(League)
plot(League)
hist(LeagueAge)
summary(BOSLAA)
hist(LeagueAge)
summary(BOSLAA)
hist(BOSLAARuns)
