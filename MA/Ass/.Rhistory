#AtBat = AB
#RunsBatted = RBI
#LeagueHit= hist.ind
median(LeagueGames)
median(BOSLAAGames)
median(BOSGames)
median(LAAGames)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns> 0,
LeagueGames > 0,
LeagueHits > 0,
LeagueAtBat > 0,
LeagueRunsBatted > 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer > 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames= > 0,
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames=> 0,
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted > 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer > 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer > 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer >= 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer >= 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
anova(League)
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer >= 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Produce a bar chart of the quality rule failures
barplot(LeagueCheck)
anova(CS5801.data)
BOSLAACheck <- check_that(BOSLAA,
BOSLAACareer>= 0,
BOSLAARunsBatted>= 0,
BOSLAAGames >= 0,
BOSLAARuns >= 0)
# Produce a bar chart of the quality rule failures
barplot(BOSLAACheck)
summary(BOSLAA)
BOSLAACheck <- check_that(BOSLAA,
BOSLAACareer>= 0,
BOSLAARunsBatted>= 0,
BOSLAAGames >= 0,
BOSLAARuns >= 0)
# Produce a bar chart of the quality rule failures
barplot(BOSLAACheck)
LAACheck <- check_that(LAA,
BOSLAARunsBatted>= 0,)
LAACheck <- check_that(LAA,
LAARunsBatted>= 0)
barplot(LAACheck)
BOSCheck <- check_that(BOS,
BOSRunsBatted>= 0)
barplot(BOSCheck)
hist(BOSBats)
hist(BOSCareer)
View(BOSLAA)
plot(BOSCareer)
anova(BOSCareer)
anova(CS5801.data)
plot(league)
plot(League)
plot(League)
hist(League)
plot(League)
hist(LeagueAge)
summary(BOSLAA)
hist(LeagueAge)
summary(BOSLAA)
hist(BOSLAARuns)
val.check1 <- check_that(dataQualEg1.DF,
age > 0,
age < 115,
married == "Y" | married == "N",
if (married == "Y") age > 17)   # check married people are adults
library(readr)
titanic_all_cols <- read_csv("~/R/CoronaShmorona/MA/5701 Labs/7/qda-lab-7-independent-practice/titanic-all-cols.csv")
View(titanic_all_cols)
library(readr)
titanic_analysis <- read_csv("~/R/CoronaShmorona/MA/5701 Labs/7/qda-lab-7-independent-practice/titanic-analysis.csv")
View(titanic_analysis)
library(ggplot2)
summary(titanic)
titanic<-read.csv("data/titanic-analysis.csv")
titanic<-titanic_analysis)
titanic<-titanic_analysis
summary(titanic)
titanic$Survived<-as.factor(titanic$Survived)
summary(titanic)
summary(titanic)
as.factor(LeagueRuns)
LeagueRuns
ggplot(titanic, aes(x=Age)) + geom_histogram(bins=20) +ggtitle("Histogram for Age of Passenger")
ggplot(titanic, aes(x=Fare)) + geom_histogram(bins=20) +ggtitle("Histogram for Fare Passenger")
ggplot(titanic, aes(x=Fare, y=Age)) + geom_point() +ggtitle("Scatter plot of Age and Fare")
ggplot(titanic, aes(x=Survived, y=Age)) + geom_boxplot()
ggplot(titanic, aes(x=Survived, y=Fare)) + geom_boxplot()
## Data quality checking for the whole league
summary(League)
LeagueCheck <- check_that(League,
LeagueRuns>= 0,
LeagueGames>= 0,
LeagueHits >= 0,
LeagueAtBat >= 0,
LeagueRunsBatted >= 0,
LeagueWeight > 0,
LeagueHeight > 0,
LeagueSalary > 0,
LeagueBirth > 0,
LeagueCareer >= 0,
LeagueAge > 0,
LeagueBats == "R" | LeagueBats == "L" | LeagueBats == "B" )
# Add code here to load any required libraries with `library()`.
# We suggest you use `install.package()` for any required packages externally to this document
# since installation only need be done once.
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dbplyr")
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
library(dbplyr)
library(foreign)
library(ggpubr)
library(xtable)
library(mgcv)
library(tree)
library(validate)
# Code to select the student specific team combination.
# Feel free to change it including the data frame name.
#
# my.2teams.df <- subset(analysis.data, teamID.x=="???" | teamID.x=="???")
# Only the two teams need to be separated at this stage, but I also decivded to have subsets including only one team each. The reason is that
BOSLAA = subset(CS5801.data, teamID.x == "BOS" | teamID.x=="LAA")
BOS = subset(CS5801.data, teamID.x == "BOS")
LAA = subset(CS5801.data, teamID.x == "LAA")
League = CS5801.data
summary(League)
summary(BOSLAA)
summary(BOS)
summary(LAA)
structure(CS5801.data)
glimpse(CS5801.data)
#1
LeagueGames = League$G
BOSLAAGames = BOSLAA$G
BOSGames = BOS$G
LAAGames = LAA$G
#2
LeagueRuns = League$R
BOSLAARuns = BOSLAA$R
BOSRuns = BOS$R
LAARuns = LAA$R
#3
LeagueHits = League$H
BOSLAAHits = BOSLAA$H
BOSHits = BOS$H
LAAHits = LAA$H
#4
LeagueAtBat = League$AB
BOSLAAAtBat = BOSLAA$AB
BOSAtBat = BOS$AB
LAAAtBat = LAA$AB
#5
LeagueRunsBatted = League$RBI
BOSLAARunsBatted = BOSLAA$RBI
BOSRunsBatted = BOS$RBI
LAARunsBatted = LAA$RBI
#6
LeagueWeight = League$weight
BOSLAAWeight = BOSLAA$weight
BOSWeight = BOS$weight
LAAWeight = LAA$weight
#7
LeagueHeight = League$height
BOSLAAHeight = BOSLAA$height
BOSHeight = BOS$height
LAAHeight = LAA$height
#8
LeagueSalary = League$salary
BOSLAASalary = BOSLAA$salary
BOSSalary = BOS$salary
LAASalary = LAA$salary
#9
LeagueBirth = League$birthDate
BOSLAABirth = BOSLAA$birthDate
BOSBirth = BOS$birthDate
LAABirth = LAA$birthDate
#10
LeagueCareer = League$career.length
BOSLAACareer = BOSLAA$career.length
BOSCareer = BOS$career.length
LAACareer = LAA$career.length
#11
LeagueBats = League$bats
BOSLAABats = BOSLAA$bats
BOSBats = BOS$bats
LAABats = LAA$bats
#12
LeagueAge = League$age
BOSLAAAge = BOSLAA$age
BOSAge = BOS$age
LAAAge = LAA$age
#13
LeagueSeasonHit = League$hit.ind
BOSLAASeasonHit = BOSLAA$hit.ind
BOSSeasonHit = BOS$hit.ind
LAASeasonHit = LAA$hit.ind
#these names will late rbe added
#Runs = R
#Hits = H
#AtBat = AB
#RunsBatted = RBI
#LeagueHit= hist.ind
median(LeagueGames)
median(BOSLAAGames)
median(BOSGames)
median(LAAGames)
ggplot(League, aes(x=LeagueSeasonHit, y=LeagueSalary)) + geom_boxplot()
LeagueSeasonHit
ggplot(League, aes(x=LeagueSeasonHit, y=LeagueAge)) + geom_boxplot()
ggplot(League, aes(x=hit.ind, y=LeagueAge)) + geom_boxplot()
titanic$Survived<-as.factor(titanic$Survived)
ggplot(titanic, aes(x=Age)) + geom_histogram(bins=20) +ggtitle("Histogram for Age of Passenger")
ggplot(titanic, aes(x=Fare)) + geom_histogram(bins=20) +ggtitle("Histogram for Fare Passenger")
ggplot(titanic, aes(x=Fare, y=Age)) + geom_point() +ggtitle("Scatter plot of Age and Fare")
ggplot(titanic, aes(x=Survived, y=Age)) + geom_boxplot()
ggplot(titanic, aes(x=Survived, y=Fare)) + geom_boxplot()
titanic.glm<-glm(titanic$Survived~titanic$Age+titanic$Sex+titanic$Fare, family = "binomial")
summary(titanic.glm)
ggplot(League, aes(x=LeagueBats, y=LeagueAge)) + geom_boxplot()
ggplot(League, aes(x=LeagueBats, y=LeagueSalary)) + geom_boxplot()
exp(coef(titanic.glm))
titanic.glm<-glm(titanic$Survived~titanic$Age+titanic$Sex+titanic$Fare, family = "binomial")
summary(titanic.glm)
exp(coef(titanic.glm))
titanic2.glm<-glm(titanic$Survived~titanic$Sex+titanic$Fare, family = "binomial")
summary(titanic2.glm)
exp(coef(titanic2.glm))
exp(cbind(OR=coef(titanic2.glm), confint(titanic2.glm)))
titanic.all<-read.csv("data/titanic-all-cols.csv")
summary(titanic.all)
# installing a new library
library(vcdExtra)
install.packages("vcdExtra")
# installing a new library
library(vcdExtra)
help(Arthritis)
summary(Arthritis)
table(Arthritis$Improved, Arthritis$Treatment)
table(Arthritis$Improved, Arthritis$Treatment)
chisq.test(table(Arthritis$Improved, Arthritis$Treatment))
Arthritis$Improved.Ind<-ifelse(Arthritis$Improved=="None", 0,1)
Arthritis.lr<-glm(Arthritis$Improved.Ind~Arthritis$Treatment, family = "binomial")
summary(Arthritis.lr)
exp(coef(Arthritis.lr))
exp(coef(Arthritis2.lr))
Arthritis2.lr<-glm(Arthritis$Improved.Ind~Arthritis$Treatment+ Arthritis$Sex+ Arthritis$Age, family = "binomial")
summary(Arthritis2.lr)
exp(coef(Arthritis2.lr))
Arthritis3.lr<-glm(Arthritis$Improved.Ind~Arthritis$Treatment*Arthritis$Sex*Arthritis$Age, family = "binomial")
summary(Arthritis3.lr)
ggplot(League, aes(x=LeagueBats, y=LeagueSalary)) + geom_boxplot()
library(ggplot2)
titanic<-titanic_analysis
summary(titanic)
titanic$Survived<-as.factor(titanic$Survived)
ggplot(titanic, aes(x=Survived, y=Age)) + geom_boxplot()
ggplot(titanic, aes(x=Survived, y=Fare)) + geom_boxplot()
titanic.glm<-glm(titanic$Survived~titanic$Age+titanic$Sex+titanic$Fare, family = "binomial")
summary(titanic.glm)
titanic.glm<-glm(titanic$Survived~titanic$Age+titanic$Sex+titanic$Fare, family = "binomial")
summary(titanic.glm)
exp(coef(titanic.glm))
exp(coef(titanic.glm))
titanic2.glm<-glm(titanic$Survived~titanic$Sex+titanic$Fare, family = "binomial")
summary(titanic2.glm)
exp(coef(titanic2.glm))
exp(cbind(OR=coef(titanic2.glm), confint(titanic2.glm)))
library(tree)
titanic.tree<-tree(titanic$Survived~titanic$Age+titanic$Sex+titanic$Fare)
plot(titanic.tree)
text(titanic.tree)
titanic.i.glm<-glm(titanic$Survived~titanic$Age*titanic$Sex*titanic$Fare, family = "binomial")
summary(titanic.i.glm)
titanic.all<-read.csv("data/titanic-all-cols.csv")
titanic.all<-titanic_all_cols
titanic.all$Survived<-as.factor(titanic.all$Survived)
titanic.all$Pclass<-titanic.all$Pclass
ggplot(titanic.all, aes(x=Fare)) + geom_histogram(bins=20) +ggtitle("Histogram for Fare")
table(titanic.all$Survived, titanic.all$Pclass)
titanic.all.glm<-glm(titanic.all$Survived~titanic.all$Pclass+titanic.all$Sex+ titanic.all$Age +
titanic.all$SibSp+ titanic.all$Parch + titanic.all$Fare + titanic.all$Embarked,family = "binomial")
summary(titanic.all.glm)
step(titanic.all.glm)
# Add code here to load any required libraries with `library()`.
# We suggest you use `install.package()` for any required packages externally to this document
# since installation only need be done once.
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dbplyr")
install.packages("foreign")
install.packages("ggpubr")
install.packages("xtable")
install.packages("mgcv")
install.packages("tree")
install.packages("validate")
library(ggplot2)
library(dplyr)
library(dbplyr)
library(foreign)
library(ggpubr)
library(xtable)
library(mgcv)
library(tree)
library(validate)
# Code to select the student specific team combination.
# Feel free to change it including the data frame name.
#
# my.2teams.df <- subset(analysis.data, teamID.x=="???" | teamID.x=="???")
# Only the two teams need to be separated at this stage, but I also decivded to have subsets including only one team each. The reason is that
BOSLAA = subset(CS5801.data, teamID.x == "BOS" | teamID.x=="LAA")
BOS = subset(CS5801.data, teamID.x == "BOS")
LAA = subset(CS5801.data, teamID.x == "LAA")
League = CS5801.data
summary(League)
summary(BOSLAA)
summary(BOS)
summary(LAA)
install.packages("tree")
step(league)
step(League)
step(LeagueAge)
step(League)
step(titanic.all.glm)
exp(coef(Arthritis.lr))
Arthritis2.lr<-glm(Arthritis$Improved.Ind~Arthritis$Treatment+ Arthritis$Sex+ Arthritis$Age, family = "binomial")
summary(Arthritis2.lr)
exp(coef(titanic.step.glm))
titanic.step.glm<-glm(titanic.all$Survived ~ titanic.all$Pclass + titanic.all$Sex +
titanic.all$Age + titanic.all$SibSp, family = "binomial")
summary(titanic.step.glm)
exp(coef(titanic.step.glm))
library(readr)
dataset <- read_csv(NULL)
View(dataset)
arm.folding<-read.csv("arm.csv")
library(readr)
arm <- read_csv("~/R/CoronaShmorona/MA/5701 Labs/8/qda-lab8-independent-practice(2)/arm.csv")
View(arm)
arm.folding<-arm
summary(arm.folding)
table(arm.folding$gender, arm.folding$armcross)
arm.table<-table(arm.folding$gender, arm.folding$armcross)
chisq.test(arm.table)
exp(coef(Arthritis.lr))
Arthritis2.lr<-glm(Arthritis$Improved.Ind~Arthritis$Treatment+ Arthritis$Sex+ Arthritis$Age, family = "binomial")
summary(Arthritis2.lr)
exp(coef(Arthritis2.lr))
Arthritis3.lr<-glm(Arthritis$Improved.Ind~Arthritis$Treatment*Arthritis$Sex*Arthritis$Age, family = "binomial")
summary(Arthritis3.lr)
arm.table<-table(arm.folding$gender, arm.folding$armcross)
chisq.test(arm.table)
table(arm.folding$gender, arm.folding$armcross)
load("~/R/CoronaShmorona/MA/5701 Labs/9/qda-lab-9-independent-practice/airp.Rda")
knitr::opts_chunk$set(echo = TRUE)
library(survival)
help("lung")
lung.analysis<-subset(lung, select = c("time", "status", "sex"))
s.survfit <- survfit(Surv(lung.analysis$time, lung.analysis$status)~ 1, data=lung.analysis )
s.survfit
lung.analysis<-subset(lung, select = c("time", "status", "sex"))
lung.gender.survfit<-survfit(Surv(lung.analysis$time, lung.analysis$status)~ lung.analysis$sex, data=lung.analysis)
lung.gender.survdiff<-survdiff(Surv(lung.analysis$time, lung.analysis$status)~ lung.analysis$sex, data=lung.analysis)
lung.gender.survdiff
plot(lung.gender.survfit, mark.time = TRUE, col=c("black", "grey75"), lty=1:2)
title(main="Survival Curve by Gender", xlab="Days", ylab = "Proportion of Patients still alive")
legend("topright", c("1- Male", "2-Female"), lty=1:2, col=c("black", "grey75"))
table(arm.folding$gender, arm.folding$armcross)
lung.perf.survfit<-survfit(Surv(lung$time, lung$status)~ lung$ph.ecog, data=lung)
lung.perf.survdiff<-survdiff(Surv(lung$time, lung$status)~ lung$ph.ecog, data=lung)
lung.perf.survdiff
plot(lung.perf.survfit, mark.time = TRUE, col=c("black", "grey75"), lty=1:4)
title(main="Survival Curve by ECOG performance score", xlab="Days", ylab = "Proportion of Patients still alive")
legend("topright", c("0", "1", "2", "3"), lty=1:4, col=c("black", "grey75"))
lung.gender.ph<-coxph(Surv(lung.analysis$time, lung.analysis$status)~ lung.analysis$sex, data=lung.analysis)
summary(lung.gender.ph)
## Data quality checking
val.check1 <- check_that(dataQualEg1.DF, age > 0, age > 115, married == "Y" | married == "N")
arm.folding<-arm
summary(arm.folding)
table(arm.folding$gender, arm.folding$armcross)
arm.table<-table(arm.folding$gender, arm.folding$armcross)
chisq.test(arm.table)
knitr::opts_chunk$set(echo = T,fig.align = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
knitr::opts_chunk$set(echo = T,fig.align = TRUE)
# I do not want to declare multiple objects to store data, so to make my life easy...
list_file_names <- c("DT-1","EY-2","EY-5","EY-6","GC-1","GC-2","SK-3","VN-1")
# declare an empty list
data <- list()
for (i in c(1:length(list_file_names)))
{
# do ensure you have the data/ folder in the directory you are working in. Hint getwd()
file_name<-paste("data/",list_file_names[i],".out",sep="")
file_data<-read.table(file_name)
# the time column is common in files and it is sufficient to store it once
if(i==1) {
data<-cbind(file_data$V1,file_data$V2)
} else {
# I do not want the time column so I am just storing the Benzene displacement
data<-cbind(data,file_data$V2)
}
}
# For plotting I would like to have convenient column names
colnames(data)<-c("Time",list_file_names)
# Just making sure things are proper
head(data)
head(data[,"Time"])
summary(data[,"DT-1"])
