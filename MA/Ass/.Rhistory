BOSLAAAtBatDone = BOSLAAAtBat[BOSLAAAtBat != "0"]
hist(BOSLAAAtBatDone, prob = T)
lines(density(BOSLAAAtBatDone), col = "red")
BOSLAARunsBattedDone = BOSLAARunsBatted[BOSLAARunsBatted !="0"]
##This is a very good moment to remove that -4
hist(BOSLAARunsBattedDone, prob = T)
lines(density(BOSLAARunsBattedDone), col = "red")
## create new sets removing values =0
BOSLAARunsDone = BOSLAARuns[BOSLAARuns != "0"]
hist(BOSLAARunsDone, prob = T)
lines(density(BOSLAARunsDone), col = "red")
BOSLAAHitsDone = BOSLAAHits[BOSLAAHits != "0"]
hist(BOSLAAHitsDone, prob = T)
lines(density(BOSLAAHitsDone), col = "red")
BOSLAAAtBatDone = BOSLAAAtBat[BOSLAAAtBat != "0"]
hist(BOSLAAAtBatDone, prob = T)
lines(density(BOSLAAAtBatDone), col = "red")
BOSLAARunsBattedDone = BOSLAARunsBatted[BOSLAARunsBatted !="0"]
BOSLAARunsBattedDone = BOSLAARunsBattedD[-0]
##This is a very good moment to remove that -4
hist(BOSLAARunsBattedDone, prob = T)
## create new sets removing values =0
BOSLAARunsDone = BOSLAARuns[BOSLAARuns != "0"]
hist(BOSLAARunsDone, prob = T)
lines(density(BOSLAARunsDone), col = "red")
BOSLAAHitsDone = BOSLAAHits[BOSLAAHits != "0"]
hist(BOSLAAHitsDone, prob = T)
lines(density(BOSLAAHitsDone), col = "red")
BOSLAAAtBatDone = BOSLAAAtBat[BOSLAAAtBat != "0"]
hist(BOSLAAAtBatDone, prob = T)
lines(density(BOSLAAAtBatDone), col = "red")
BOSLAARunsBattedDone = BOSLAARunsBatted[BOSLAARunsBatted !="0"]
BOSLAARunsBattedDone = BOSLAARunsBattedDone[-0]
##This is a very good moment to remove that -4
hist(BOSLAARunsBattedDone, prob = T)
## create new sets removing values =0
BOSLAARunsDone = BOSLAARuns[BOSLAARuns != "0"]
hist(BOSLAARunsDone, prob = T)
lines(density(BOSLAARunsDone), col = "red")
BOSLAAHitsDone = BOSLAAHits[BOSLAAHits != "0"]
hist(BOSLAAHitsDone, prob = T)
lines(density(BOSLAAHitsDone), col = "red")
BOSLAAAtBatDone = BOSLAAAtBat[BOSLAAAtBat != "0"]
hist(BOSLAAAtBatDone, prob = T)
lines(density(BOSLAAAtBatDone), col = "red")
BOSLAARunsBattedD = BOSLAARunsBatted[BOSLAARunsBatted !="0"]
BOSLAARunsBattedDone = BOSLAARunsBattedD[-0]
##This is a very good moment to remove that -4
hist(BOSLAARunsBattedDone, prob = T)
## create new sets removing values =0
BOSLAARunsDone = BOSLAARuns[BOSLAARuns != "0"]
hist(BOSLAARunsDone, prob = T)
lines(density(BOSLAARunsDone), col = "red")
BOSLAAHitsDone = BOSLAAHits[BOSLAAHits != "0"]
hist(BOSLAAHitsDone, prob = T)
lines(density(BOSLAAHitsDone), col = "red")
BOSLAAAtBatDone = BOSLAAAtBat[BOSLAAAtBat != "0"]
hist(BOSLAAAtBatDone, prob = T)
lines(density(BOSLAAAtBatDone), col = "red")
BOSLAARunsBattedD = BOSLAARunsBatted[BOSLAARunsBatted !="0"]
##This is a very good moment to remove that -4
hist(BOSLAARunsBattedDone, prob = T)
## create new sets removing values =0
BOSLAARunsDone = BOSLAARuns[BOSLAARuns != "0"]
hist(BOSLAARunsDone, prob = T)
lines(density(BOSLAARunsDone), col = "red")
BOSLAAHitsDone = BOSLAAHits[BOSLAAHits != "0"]
hist(BOSLAAHitsDone, prob = T)
lines(density(BOSLAAHitsDone), col = "red")
BOSLAAAtBatDone = BOSLAAAtBat[BOSLAAAtBat != "0"]
hist(BOSLAAAtBatDone, prob = T)
lines(density(BOSLAAAtBatDone), col = "red")
BOSLAARunsBattedDone = BOSLAARunsBatted[BOSLAARunsBatted !="0"]
##This is a very good moment to remove that -4
hist(BOSLAARunsBattedDone, prob = T)
lines(density(BOSLAARunsBattedDone), col = "red")
## create new sets removing values =0
BOSLAARunsDone = BOSLAARuns[BOSLAARuns != "0"]
hist(BOSLAARunsDone, prob = T)
lines(density(BOSLAARunsDone), col = "red")
BOSLAAHitsDone = BOSLAAHits[BOSLAAHits != "0"]
hist(BOSLAAHitsDone, prob = T)
lines(density(BOSLAAHitsDone), col = "red")
BOSLAAAtBatDone = BOSLAAAtBat[BOSLAAAtBat != "0"]
hist(BOSLAAAtBatDone, prob = T)
lines(density(BOSLAAAtBatDone), col = "red")
BOSLAARunsBattedDone = BOSLAARunsBatted[BOSLAARunsBatted !="0"]
##This is a very good moment to remove that -4
hist(BOSLAARunsBattedDone, prob = T)
lines(density(BOSLAARunsBattedDone), col = "red")
## create new sets removing values =0
BOSLAARunsDone = BOSLAARuns[BOSLAARuns != "0"]
hist(BOSLAARunsDone, prob = T)
lines(density(BOSLAARunsDone), col = "red")
summary(BOSLAARunsDone)
BOSLAAHitsDone = BOSLAAHits[BOSLAAHits != "0"]
hist(BOSLAAHitsDone, prob = T)
lines(density(BOSLAAHitsDone), col = "red")
summary(BOSLAAHitsDone)
BOSLAAAtBatDone = BOSLAAAtBat[BOSLAAAtBat != "0"]
hist(BOSLAAAtBatDone, prob = T)
lines(density(BOSLAAAtBatDone), col = "red")
summary(BOSLAAAtBatDone)
BOSLAARunsBattedDone = BOSLAARunsBatted[BOSLAARunsBatted !="0"]
##This is a very good moment to remove that -4
hist(BOSLAARunsBattedDone, prob = T)
lines(density(BOSLAARunsBattedDone), col = "red")
summary(BOSLAARunsBattedDone)
## create new sets removing values =0
BOSLAARunsDone = BOSLAARuns[BOSLAARuns != "0"]
hist(BOSLAARunsDone, prob = T)
lines(density(BOSLAARunsDone), col = "red")
summary(BOSLAARunsDone)
BOSLAAHitsDone = BOSLAAHits[BOSLAAHits != "0"]
hist(BOSLAAHitsDone, prob = T)
lines(density(BOSLAAHitsDone), col = "red")
summary(BOSLAAHitsDone)
BOSLAAAtBatDone = BOSLAAAtBat[BOSLAAAtBat != "0"]
hist(BOSLAAAtBatDone, prob = T)
lines(density(BOSLAAAtBatDone), col = "red")
summary(BOSLAAAtBatDone)
BOSLAARunsBattedDone = BOSLAARunsBatted[BOSLAARunsBatted !="0"]
##This is a very good moment to remove that -4
plot(BOSLAARunsBattedDone, prob = T)
lines(density(BOSLAARunsBattedDone), col = "red")
summary(BOSLAARunsBattedDone)
## create new sets removing values =0
BOSLAARunsDone = BOSLAARuns[BOSLAARuns != "0"]
hist(BOSLAARunsDone, prob = T)
lines(density(BOSLAARunsDone), col = "red")
summary(BOSLAARunsDone)
BOSLAAHitsDone = BOSLAAHits[BOSLAAHits != "0"]
hist(BOSLAAHitsDone, prob = T)
lines(density(BOSLAAHitsDone), col = "red")
summary(BOSLAAHitsDone)
BOSLAAAtBatDone = BOSLAAAtBat[BOSLAAAtBat != "0"]
hist(BOSLAAAtBatDone, prob = T)
lines(density(BOSLAAAtBatDone), col = "red")
summary(BOSLAAAtBatDone)
BOSLAARunsBattedDone = BOSLAARunsBatted[BOSLAARunsBatted !="0"]
##This is a very good moment to remove that -4
hist(BOSLAARunsBattedDone, prob = T)
lines(density(BOSLAARunsBattedDone), col = "red")
summary(BOSLAARunsBattedDone)
# If a package is installed, it will be loaded and missing package(s) will be installed
# from CRAN and then loaded.
# The packages we need are:
packages = c("tidyverse", "devtools")
# Load the package or install and load it
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install_github("https://github.com/joachim-gassen/tidycovid19.git")
# select only the UK data
cv.uk.df <- subset(cv.df, iso3c=="GBR")
#Download the data into a data frame called cv.df using the
#download_jhu_csse_covid19_data() function from the {tidycovid19} package.
#
cv.df <- download_jhu_csse_covid19_data(cached = TRUE)
# If a package is installed, it will be loaded and missing package(s) will be installed
# from CRAN and then loaded.
# The packages we need are:
packages = c("tidyverse", "devtools")
# Load the package or install and load it
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install_github("https://github.com/joachim-gassen/tidycovid19.git")
library(tidycovid19)
#Download the data into a data frame called cv.df using the
#download_jhu_csse_covid19_data() function from the {tidycovid19} package.
#
cv.df <- download_jhu_csse_covid19_data(cached = TRUE)
# select only the UK data
cv.uk.df <- subset(cv.df, iso3c=="GBR")
head(cv.uk.df)
tail(cv.uk.df)
# select only the UK data
cv.uk.df <- subset(cv.df, iso3c=="GBR")
head(cv.uk.df)
tail(cv.uk.df)
# Compute new deaths as the data shows cumulative deaths
cv.uk.df$new.d[2:nrow(cv.uk.df)] <- tail(cv.uk.df$deaths, -1) - head(cv.uk.df$deaths, -1)
cv.uk.df$new.d[1] <- 0     # Add zero for first row
# Compute new infections
cv.uk.df$new.i[2:nrow(cv.uk.df)] <- tail(cv.uk.df$confirmed, -1) - head(cv.uk.df$confirmed, -1)
cv.uk.df$new.i[1] <- 0     # Add zero for first row
# NB a small span value (<1) makes the loess smoother more wiggly!
ggplot(data = cv.uk.df, aes(x = date, y = new.d)) +
geom_line(color = "skyblue", size = 0.6) +
ylim(0,1200) +
stat_smooth(color = "darkorange", fill = "darkorange", method = "loess", span = 0.2) +
ggtitle("Daily additional deaths in the UK due to covid-19") +
xlab("Date") + ylab("Daily new deaths")
ggsave("cv19_UK_deathrate.png")
ggplot(data = cv.uk.df, aes(x = date, y = new.i)) +
geom_line(color = "skyblue", size = 0.6) +
scale_y_continuous(trans = "log10") +
stat_smooth(color = "darkorange", fill = "darkorange", method = "loess") +
ggtitle("Daily new infections in the UK from covid-19") +
xlab("Date") + ylab("Daily new infections")
ggsave("cv19_UK_infectionrate.png")
max(cv.uk.df$deaths)
max(cv.uk.df$confirmed)
max(cv.uk.df$confirmed, na.rm = FALSE)
max(cv.uk.df$deaths, na.rm = FALSE)
sum(cv.uk.df$deaths, na.rm = FALSE)
max(cv.uk.df$deaths, na.rm = FALSE)
View(cv.uk.df)
max(cv.uk.df$new.i, na.rm = FALSE)
View(cv.df)
ggplot(data = cv.fra.df, aes(x = date, y = new.i)) +
geom_line(color = "skyblue", size = 0.6) +
scale_y_continuous(trans = "log10") +
stat_smooth(color = "darkorange", fill = "darkorange", method = "loess") +
ggtitle("Daily new infections in the UK from covid-19") +
xlab("Date") + ylab("Daily new infections")
cv.fr.df <- subset(cv.df, iso3c=="FRA")
ggplot(data = cv.fr.df, aes(x = date, y = new.i)) +
geom_line(color = "skyblue", size = 0.6) +
scale_y_continuous(trans = "log10") +
stat_smooth(color = "darkorange", fill = "darkorange", method = "loess") +
ggtitle("Daily new infections in the UK from covid-19") +
xlab("Date") + ylab("Daily new infections")
cv.fr.df <- subset(cv.df, iso3c=="FRA")
ggplot(data = cv.fr.df, aes(x = date, y = new.i)) +
geom_line(color = "skyblue", size = 0.6) +
scale_y_continuous(trans = "log10") +
stat_smooth(color = "darkorange", fill = "darkorange", method = "loess") +
ggtitle("Daily new infections in the UK from covid-19") +
xlab("Date") + ylab("Daily new infections")
cv.fr.df <- subset(cv.df, iso3c=="FRA")
cv.fr.df <- subset(cv.df, iso3c=="FRA")
# Compute new deaths as the data shows cumulative deaths
cv.fr.df$new.d[2:nrow(cv.fr.df)] <- tail(cv.fr.df$deaths, -1) - head(cv.fr.df$deaths, -1)
cv.fr.df$new.d[1] <- 0     # Add zero for first row
# Compute new infections
cv.fr.df$new.i[2:nrow(cv.fr.df)] <- tail(cv.fr.df$confirmed, -1) - head(cv.fr.df$confirmed, -1)
cv.fr.df$new.i[1] <- 0     # Add zero for first row
ggplot(data = cv.fr.df, aes(x = date, y = new.i)) +
geom_line(color = "skyblue", size = 0.6) +
scale_y_continuous(trans = "log10") +
stat_smooth(color = "darkorange", fill = "darkorange", method = "loess") +
ggtitle("Daily new infections in the UK from covid-19") +
xlab("Date") + ylab("Daily new infections")
ggsave("cv19_UK_infectionrate.png")
typeof(cv.fr.df$new.i)
sample = dbinom(0:1000, size = 1000, prob = 0.5)
pbinom(0.5, 1)
nsamples = 10000
s_norm = 0
s_std = 1
y = rnorm(nsamples, s_norm, s_std)
y2 = rbinom(nsamples, 1000, 0.5)
plot(y)
plot(y2)
dbinom(0:5, size = 5, prob = 0.25)
dbinom(0:5, size = 5, prob = 0.25)
lab2sol = dbinom(0:5, size = 5, prob = 0.25)
plot(lab2sol)
1-pbinom(0,5,0.25)
nsamples = 10000
nsamplesmean = 0
nsamplessd = 1
rnormsamples = rnorm(nsamples, nsamplesmean, nsamplessd)
plot(rnormsamples)
lab2sol = dbinom(0:5, size = 5, prob = 0.25)
plot(lab2sol)
nsamples = 10000
nsamplesmean = 0
nsamplessd = 1
rnormsamples = rnorm(nsamples, nsamplesmean, nsamplessd)
plot(rnormsamples)
hist(rnormsamples)
lab2sol = dbinom(0:5, size = 5, prob = 0.25)
plot(lab2sol)
nsamples = 10000
nsamplesmean = 0
nsamplessd = 1
rnormsamples = rnorm(nsamples, nsamplesmean, nsamplessd)
plot(rnormsamples)
hist(rnormsamples)
dnorm(nsamplesmean)
lab2sol = dbinom(0:5, size = 5, prob = 0.25)
plot(lab2sol)
nsamples = 10000
nsamplesmean = 0
nsamplessd = 1
rnormsamples = rnorm(nsamples, nsamplesmean, nsamplessd)
plot(rnormsamples)
hist(rnormsamples)
dnorm(2)
lab2sol = dbinom(0:5, size = 5, prob = 0.25)
plot(lab2sol)
nsamples = 10000
nsamplesmean = 0
nsamplessd = 1
rnormsamples = rnorm(nsamples, nsamplesmean, nsamplessd)
plot(rnormsamples)
hist(rnormsamples)
dnorm(2)
pnorm(nsamplesmean)
lab2sol = dbinom(0:5, size = 5, prob = 0.25)
plot(lab2sol)
nsamples = 10000
nsamplesmean = 0
nsamplessd = 1
rnormsamples = rnorm(nsamples, nsamplesmean, nsamplessd)
plot(rnormsamples)
hist(rnormsamples)
dnorm(2)
pnorm(nsamplesmean)
qnorm(nsamplesmean)
lab2sol = dbinom(0:5, size = 5, prob = 0.25)
plot(lab2sol)
nsamples = 10000
nsamplesmean = 0
nsamplessd = 1
rnormsamples = rnorm(nsamples, nsamplesmean, nsamplessd)
plot(rnormsamples)
hist(rnormsamples)
dnorm(2)
pnorm(nsamplesmean)
qnorm(2)
lab2sol = dbinom(0:5, size = 5, prob = 0.25)
plot(lab2sol)
nsamples = 10000
nsamplesmean = 0
nsamplessd = 1
rnormsamples = rnorm(nsamples, nsamplesmean, nsamplessd)
plot(rnormsamples)
hist(rnormsamples)
dnorm(2)
pnorm(nsamplesmean)
qnorm(nsamplesmean)
lab2sol = dbinom(0:5, size = 5, prob = 0.25)
plot(lab2sol)
x<-seq(60,150)
y<-dnorm(x,mean = 105, sd=9)
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
x<-seq(60,150)
y<-dnorm(x,mean = 105, sd=9)
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
x<-seq(0,300)
y<-dnorm(x,mean = 105, sd=9)
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
x<-seq(50,150)
y<-dnorm(x,mean = 105, sd=9)
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
dbinom(x, dnorm(x,mean = 105, sd=9)
pbinom(x, dnorm(x,mean = 105, sd=9)
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
dbinom(x, dnorm(x,mean = 105, sd=9))
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
pbinom(x, dnorm(x,mean = 105, sd=9))
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
dnorm(x, dnorm(x,mean = 105, sd=9))
pnorm(x, dnorm(x,mean = 105, sd=9))
qnorm(x, dnorm(x,mean = 105, sd=9))
rbinom(x, dnorm(x,mean = 105, sd=9))
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
dnorm(x, dnorm(x,mean = 105, sd=9))
pnorm(x, dnorm(x,mean = 105, sd=9))
qnorm(x, dnorm(x,mean = 105, sd=9))
rnorm(x, dnorm(x,mean = 105, sd=9))
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
dnorm(mean, dnorm(x,mean = 105, sd=9))
x<-seq(50,150)
y<-dnorm(x,mean = 105, sd=9)
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
dnorm(mean, dnorm(x,mean = 105, sd=9))
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
dnorm(105, dnorm(x,mean = 105, sd=9))
pnorm(mean, dnorm(x,mean = 105, sd=9))
x<-seq(50,150)
y<-dnorm(x,mean = 105, sd=9)
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
dnorm(105, dnorm(x,mean = 105, sd=9))
pnorm(dnorm)
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
dnorm(105, dnorm(x,mean = 105, sd=9))
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
dnorm(105, dnorm(x,mean = 105, sd=9))
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
dnorm(x, dnorm(x,mean = 105, sd=9))
pnorm(125, mean = 105, sd=9)-pnorm(90, mean = 105, sd=9)
plot(x, dnorm(x,mean = 105, sd=9), type = "l")
abline(v=90, lty=2)
abline(v=125, lty=3)
pnorm(125, mean = 105, sd=9)-pnorm(90, mean = 105, sd=9)
qnorm(0.1, mean = 105, sd=9)
qnorm(0.5, mean = 105, sd=9)
mpg<-read.csv("data/auto-mpg.csv")
qnorm(0.1, mean = 105, sd=9)
mpg<-read.csv("data/auto-mpg.csv")
library(readr)
auto_mpg <- read_csv("~/R/CoronaShmorona/MA/5701 Labs/2/QDA lab 2 independent practice (1)/auto-mpg.csv")
View(auto_mpg)
mpg<-auto_mpg
summary(mpg)
library(ggplot2)
ggplot(data=mpg, aes(x=acceleration)) + geom_density() +
theme_classic() + ggtitle("Histogram of Acceletation")
# select only the UK data
cv.uk.df <- subset(cv.df, iso3c=="GBR")
head(cv.uk.df)
tail(cv.uk.df)
#Download the data into a data frame called cv.df using the
#download_jhu_csse_covid19_data() function from the {tidycovid19} package.
#
cv.df <- download_jhu_csse_covid19_data(cached = TRUE)
# select only the UK data
cv.uk.df <- subset(cv.df, iso3c=="GBR")
head(cv.uk.df)
tail(cv.uk.df)
# If a package is installed, it will be loaded and missing package(s) will be installed
# from CRAN and then loaded.
# The packages we need are:
packages = c("tidyverse", "devtools")
# Load the package or install and load it
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install_github("https://github.com/joachim-gassen/tidycovid19.git")
#Download the data into a data frame called cv.df using the
#download_jhu_csse_covid19_data() function from the {tidycovid19} package.
#
cv.df <- download_jhu_csse_covid19_data(cached = TRUE)
# select only the UK data
cv.uk.df <- subset(cv.df, iso3c=="GBR")
head(cv.uk.df)
tail(cv.uk.df)
# If a package is installed, it will be loaded and missing package(s) will be installed
# from CRAN and then loaded.
# The packages we need are:
packages = c("tidyverse", "devtools")
# Load the package or install and load it
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install_github("https://github.com/joachim-gassen/tidycovid19.git")
# If a package is installed, it will be loaded and missing package(s) will be installed
# from CRAN and then loaded.
# The packages we need are:
packages = c("tidyverse", "devtools")
# Load the package or install and load it
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install_github("https://cran.r-project.org/bin/windows/Rtools/")
# If a package is installed, it will be loaded and missing package(s) will be installed
# from CRAN and then loaded.
# The packages we need are:
packages = c("tidyverse", "devtools")
# Load the package or install and load it
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install_github("https://github.com/joachim-gassen/tidycovid19.git")
h
# If a package is installed, it will be loaded and missing package(s) will be installed
# from CRAN and then loaded.
# The packages we need are:
packages = c("tidyverse", "devtools")
# Load the package or install and load it
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install_github("https://github.com/joachim-gassen/tidycovid19.git")
