hist(BOSLAAHeight)
hist(BOSLAACareer)
hist(BOSLAAAge)
hist(BOSLAASeasonHit)
##variablew platerID
##teamID.x
##R - Runs
##G - Games
##H - Hits
##AB - AtBat
##RBI - RunsBatted
##weight
##height
##salary
##birthDate - Birth
##career.length - Career
##bats
##age
##hit.ind - SeasonHit
summary(BOSLAA)
hist(BOSLAARuns)
lines(density(BOSLAARuns))
hist(BOSLAAGames)
hist(BOSLAAHits)
hist(BOSLAAAtBat)
hist(BOSLAARunsBatted)
hist(BOSLAAWeight)
hist(BOSLAAHeight)
hist(BOSLAACareer)
hist(BOSLAAAge)
hist(BOSLAASeasonHit)
##variablew platerID
##teamID.x
##R - Runs
##G - Games
##H - Hits
##AB - AtBat
##RBI - RunsBatted
##weight
##height
##salary
##birthDate - Birth
##career.length - Career
##bats
##age
##hit.ind - SeasonHit
summary(BOSLAA)
hist(BOSLAARuns)
lines(density(BOSLAARuns))
hist(BOSLAAGames)
hist(BOSLAAHits)
hist(BOSLAAAtBat)
hist(BOSLAARunsBatted)
hist(BOSLAAWeight)
lines(density(BOSLAAWeight))
hist(BOSLAAHeight)
hist(BOSLAACareer)
hist(BOSLAAAge)
hist(BOSLAASeasonHit)
##variablew platerID
##teamID.x
##R - Runs
##G - Games
##H - Hits
##AB - AtBat
##RBI - RunsBatted
##weight
##height
##salary
##birthDate - Birth
##career.length - Career
##bats
##age
##hit.ind - SeasonHit
summary(BOSLAA)
hist(BOSLAARuns)
lines(density(BOSLAARuns))
hist(BOSLAAGames)
hist(BOSLAAHits)
hist(BOSLAAAtBat)
hist(BOSLAARunsBatted)
hist(BOSLAAWeight)
lines(density(BOSLAAWeight), lwd = 2)
hist(BOSLAAHeight)
hist(BOSLAACareer)
hist(BOSLAAAge)
hist(BOSLAASeasonHit)
##variablew platerID
##teamID.x
##R - Runs
##G - Games
##H - Hits
##AB - AtBat
##RBI - RunsBatted
##weight
##height
##salary
##birthDate - Birth
##career.length - Career
##bats
##age
##hit.ind - SeasonHit
summary(BOSLAA)
hist(BOSLAARuns)
lines(density(BOSLAARuns))
hist(BOSLAAGames)
hist(BOSLAAHits)
hist(BOSLAAAtBat)
hist(BOSLAARunsBatted)
hist(BOSLAAWeight)
lines(density(BOSLAAWeight), lwd = 2, col = "blue")
hist(BOSLAAHeight)
hist(BOSLAACareer)
hist(BOSLAAAge)
hist(BOSLAASeasonHit)
##variablew platerID
##teamID.x
##R - Runs
##G - Games
##H - Hits
##AB - AtBat
##RBI - RunsBatted
##weight
##height
##salary
##birthDate - Birth
##career.length - Career
##bats
##age
##hit.ind - SeasonHit
summary(BOSLAA)
hist(BOSLAARuns)
lines(density(BOSLAARuns))
hist(BOSLAAGames)
hist(BOSLAAHits)
hist(BOSLAAAtBat)
hist(BOSLAARunsBatted)
hist(BOSLAAWeight)
lines(density(BOSLAAWeight,na.rm=T),col="red",lwd=4)
hist(BOSLAAHeight)
hist(BOSLAACareer)
hist(BOSLAAAge)
hist(BOSLAASeasonHit)
ggplot(BOSLAARuns)
ggplot(BOSLAA)
aov(BOSLAA)
diet.df<-read.csv("Diet_r.csv")
ggplot(diet.df, aes(x=Age)) + geom_histogram(bins=10) + theme_bw()
ggplot(diet.df, aes(x=pre.weight)) + geom_histogram(bins=10) + theme_bw()
ggplot(diet.df, aes(x=weight6weeks)) + geom_histogram(bins=10) + theme_bw()
ggplot(diet.df, aes(x=Diet, y=pre.weight, fill=gender)) +geom_boxplot() + theme_bw() +
ggtitle("Distribution of Starting Weight by Diet and Gender")
diet.df<-read.csv("Diet_r.csv")
summary(diet.df)
table(diet.df$Diet)
diet.df$Diet<-as.factor(diet.df$Diet)
ggplot(diet.df, aes(x=Age)) + geom_histogram(bins=10) + theme_bw()
ggplot(diet.df, aes(x=pre.weight)) + geom_histogram(bins=10) + theme_bw()
ggplot(diet.df, aes(x=weight6weeks)) + geom_histogram(bins=10) + theme_bw()
ggplot(diet.df, aes(x=Diet, y=pre.weight, fill=gender)) +geom_boxplot() + theme_bw() +
ggtitle("Distribution of Starting Weight by Diet and Gender")
t.test(diet.df$pre.weight, diet.df$weight6weeks)
diet.df$weight.lost<-diet.df$pre.weight-diet.df$weight6weeks
summary(diet.df$weight.lost)
hist(diet.df$weight.lost)
summary(aov(diet.df$weight.lost~diet.df$Diet))
summary.lm(aov(diet.df$weight.lost~diet.df$Diet))
plot(aov(diet.df$weight.lost~diet.df$Diet))1q
plot(aov(diet.df$weight.lost~diet.df$Diet))1q
plot(aov(diet.df$weight.lost~diet.df$Diet))1
plot(aov(diet.df$weight.lost~diet.df$Diet))
plot(model2)
model2<-lm(diet.df$weight.lost~diet.df$Diet+diet.df$Age)
summary(model2)
summary(BOSLAA)
BOSLAACheck <- check_that(BOSLAA,
BOSLAACareer>= 0,
BOSLAARunsBatted>= 0,
BOSLAAGames >= 0,
BOSLAARuns >= 0)
# Produce a bar chart of the quality rule failures
barplot(BOSLAACheck)
LAACheck <- check_that(LAA,
LAARunsBatted>= 0)
barplot(LAACheck)
BOSCheck <- check_that(BOS,
BOSRunsBatted>= 0)
barplot(BOSCheck)
##variablew platerID
##teamID.x
##R - Runs
##G - Games
##H - Hits
##AB - AtBat
##RBI - RunsBatted
##weight
##height
##salary
##birthDate - Birth
##career.length - Career
##bats
##age
##hit.ind - SeasonHit
summary(BOSLAA)
hist(BOSLAARuns)
lines(density(BOSLAARuns))
hist(BOSLAAGames)
hist(BOSLAAHits)
hist(BOSLAAAtBat)
hist(BOSLAARunsBatted)
hist(BOSLAAWeight)
hist(BOSLAAHeight)
hist(BOSLAACareer)
hist(BOSLAAAge)
hist(BOSLAASeasonHit)
##variablew platerID
##teamID.x
##R - Runs
##G - Games
##H - Hits
##AB - AtBat
##RBI - RunsBatted
##weight
##height
##salary
##birthDate - Birth
##career.length - Career
##bats
##age
##hit.ind - SeasonHit
summary(BOSLAA)
hist(BOSLAARuns)
lines(density(BOSLAARuns))
hist(BOSLAAGames)
hist(BOSLAAHits)
hist(BOSLAAAtBat)
hist(BOSLAARunsBatted)
hist(BOSLAAWeight)
lines(density(BOSLAAWeight,na.rm=T),col="red",lwd=4)
hist(BOSLAAHeight)
hist(BOSLAACareer)
hist(BOSLAAAge)
hist(BOSLAASeasonHit)
ggplot(League, aes(x=LeagueBats, y=LeagueSalary)) + geom_boxplot()
ggplot(League, aes(x=BOSLAABats, y=BOSLAASalary)) + geom_boxplot()
ggplot(League, aes(x=LeagueBats, y=LeagueSalary)) + geom_boxplot()
ggplot(League, aes(x=LeagueBats, y=LeagueSalary)) + geom_boxplot()
ggplot(BOSLAA, aes(x=BOSLAABats, y=BOSLAASalary)) + geom_boxplot()
ggplot(League, aes(x=LeagueBats, y=LeagueSalary)) + geom_boxplot()
ggplot(BOSLAA, aes(x=BOSLAABats, y=BOSLAASalary)) + geom_boxplot()
ggplot(LAA, aes(x=LAABats, y=LAASalary)) + geom_boxplot()
ggplot(BOS, aes(x=BOSBats, y=BOSSalary)) + geom_boxplot()
ggplot(BOSLAA, aes(x=BOSLAABats, y=BOSLAASalary)) + geom_boxplot()
ggplot(LAA, aes(x=LAABats, y=LAASalary)) + geom_boxplot()
ggplot(BOS, aes(x=BOSBats, y=BOSSalary)) + geom_boxplot()
hist(BOSCareer)
step(league)
ggplot(BOSLAA, aes(x=BOSLAABats, y=BOSLAASalary)) + geom_boxplot()
ggplot(LAA, aes(x=LAABats, y=LAASalary)) + geom_boxplot()
ggplot(BOS, aes(x=BOSBats, y=BOSSalary)) + geom_boxplot()
median(BOSLAASeasonHit)
summary(BOSLAASeasonHit)
table(BOSLAASeasonHit)
table(BOSLAASeasonHit)
prop.table(BOSLAASeasonHit)
install.packages("proportion")
table(BOSLAASeasonHit)
table(BOSLAASeasonHit)
mean(BOSLAASeasonHit)
knitr::opts_chunk$set(echo = T,fig.align = TRUE)
# I do not want to declare multiple objects to store data, so to make my life easy...
list_file_names <- c("DT-1","EY-2","EY-5","EY-6","GC-1","GC-2","SK-3","VN-1")
# declare an empty list
data <- list()
for (i in c(1:length(list_file_names)))
{
# do ensure you have the data/ folder in the directory you are working in. Hint getwd()
file_name<-paste("data/",list_file_names[i],".out",sep="")
file_data<-read.table(file_name)
# the time column is common in files and it is sufficient to store it once
if(i==1) {
data<-cbind(file_data$V1,file_data$V2)
} else {
# I do not want the time column so I am just storing the Benzene displacement
data<-cbind(data,file_data$V2)
}
}
# For plotting I would like to have convenient column names
colnames(data)<-c("Time",list_file_names)
# Just making sure things are proper
head(data)
head(data[,"Time"])
summary(data[,"DT-1"])
transparency<-0.5
data_color <- c(
rgb(0.0,0.0,0.0,transparency), #black
rgb(1.0,0.0,0.0,transparency), #red
rgb(0.0,1.0,0.0,transparency), #green
rgb(0.0,0.0,1.0,transparency), #blue
rgb(1.0,0.5,0.0,transparency), #orange
rgb(0.0,1.0,1.0,transparency), #cyan
rgb(0.0,0.5,0.5,transparency), #teal
rgb(0.28,0.24,0.2,transparency) #taupe
)
ylabel <- "Distance (Å)"
xlabel <- "Time (ns)"
plot_title <- "Benzene displacement"
par(las=2)
boxplot(subset(data,select=list_file_names),horizontal=F,ylab="ylabel")
# Just making sure things are proper
head(data)
head(data[,"Time"])
summary(data[,"DT-1"])
View(titanic)
transparency<-0.5
data_color <- c(
rgb(0.0,0.0,0.0,transparency), #black
rgb(1.0,0.0,0.0,transparency), #red
rgb(0.0,1.0,0.0,transparency), #green
rgb(0.0,0.0,1.0,transparency), #blue
rgb(1.0,0.5,0.0,transparency), #orange
rgb(0.0,1.0,1.0,transparency), #cyan
rgb(0.0,0.5,0.5,transparency), #teal
rgb(0.28,0.24,0.2,transparency) #taupe
)
ylabel <- "Distance (Å)"
xlabel <- "Time (ns)"
plot_title <- "Benzene displacement"
for (i in c(1:length(list_file_names)))
{
# the time column is common in files and it is sufficient to store it once
if(i==1) {
plot(data[,"Time"],data[,list_file_names[i]],xlab=xlabel,ylab=ylabel,main=plot_title,col=data_color[i],type="l",ylim=c(0,70))
} else {
lines(data[,"Time"],data[,list_file_names[i]],col=data_color[i])
}
}
legend(x="topleft",legend=list_file_names,col=data_color,horiz=F,lwd=3,bty='n')
ylabel <- "Distance (Å)"
xlabel <- "Time (ns)"
for (i in c(1:length(list_file_names)))
{
# the time column is common in files and it is sufficient to store it once
if(i==1) {
plot(density(data[,list_file_names[i]]),xlab=ylabel,ylab="Frequency",main=plot_title,col=data_color[i],type="l",xlim=c(0,70),ylim=c(0,1),lwd=3)
} else {
lines(density(data[,list_file_names[i]]),col=data_color[i],lwd=3)
}
}
legend(x="topright",legend=list_file_names,col=data_color,horiz=F,lwd=1,bty='n')
summary(cbind(data[,"DT-1"],data[,"EY-2"]))
plot(data[,"Time"],data[,list_file_names[1]],xlab=xlabel,ylab="Frequency",main=plot_title,col=data_color[1],type="l",xlim=c(0,10),ylim=c(0,70),lwd=3)
lines(data[,"Time"],data[,list_file_names[2]],col=data_color[2],lwd=3)
legend(x="topleft",legend=list_file_names[1:2],col=data_color,horiz=F,lwd=1,bty='n')
plot(density(data[,list_file_names[1]]),xlab=ylabel,ylab="Frequency",main=plot_title,col=data_color[1],type="l",xlim=c(0,70),ylim=c(0,1),lwd=3)
lines(density(data[,list_file_names[2]]),col=data_color[2],lwd=3)
legend(x="topright",legend=list_file_names[1:2],col=data_color,horiz=F,lwd=1,bty='n')
plot(data[,"Time"],data[,list_file_names[1]],xlab=xlabel,ylab=ylabel,main=plot_title,col=data_color[1],type="l",xlim=c(0,10),ylim=c(0,70),lwd=3)
lines(data[,"Time"],runmed(data[,list_file_names[1]],k=101),col=data_color[2],lwd=1.5)
lines(data[,"Time"],tricubeMovingAverage(data[,list_file_names[1]],span=0.01),col=data_color[3],lwd=1.5)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
library(limma)
# I do not want to declare multiple objects to store data, so to make my life easy...
list_file_names <- c("DT-1","EY-2","EY-5","EY-6","GC-1","GC-2","SK-3","VN-1")
# declare an empty list
data <- list()
for (i in c(1:length(list_file_names)))
{
# do ensure you have the data/ folder in the directory you are working in. Hint getwd()
file_name<-paste("data/",list_file_names[i],".out",sep="")
file_data<-read.table(file_name)
# the time column is common in files and it is sufficient to store it once
if(i==1) {
data<-cbind(file_data$V1,file_data$V2)
} else {
# I do not want the time column so I am just storing the Benzene displacement
data<-cbind(data,file_data$V2)
}
}
# For plotting I would like to have convenient column names
colnames(data)<-c("Time",list_file_names)
methods:
naive bayes
y
# I do not want to declare multiple objects to store data, so to make my life easy...
list_file_names <- c("DT-1","EY-2","EY-5","EY-6","GC-1","GC-2","SK-3","VN-1")
# declare an empty list
data <- list()
for (i in c(1:length(list_file_names)))
{
# do ensure you have the data/ folder in the directory you are working in. Hint getwd()
file_name<-paste("data/",list_file_names[i],".out",sep="")
file_data<-read.table(file_name)
# the time column is common in files and it is sufficient to store it once
if(i==1) {
data<-cbind(file_data$V1,file_data$V2)
} else {
# I do not want the time column so I am just storing the Benzene displacement
data<-cbind(data,file_data$V2)
}
}
# For plotting I would like to have convenient column names
colnames(data)<-c("Time",list_file_names)
# Just making sure things are proper
head(data)
head(data[,"Time"])
summary(data[,"DT-1"])
transparency<-0.5
data_color <- c(
rgb(0.0,0.0,0.0,transparency), #black
rgb(1.0,0.0,0.0,transparency), #red
rgb(0.0,1.0,0.0,transparency), #green
rgb(0.0,0.0,1.0,transparency), #blue
rgb(1.0,0.5,0.0,transparency), #orange
rgb(0.0,1.0,1.0,transparency), #cyan
rgb(0.0,0.5,0.5,transparency), #teal
rgb(0.28,0.24,0.2,transparency) #taupe
)
ylabel <- "Distance (Å)"
xlabel <- "Time (ns)"
plot_title <- "Benzene displacement"
par(las=2)
boxplot(subset(data,select=list_file_names),horizontal=F,ylab="ylabel")
for (i in c(1:length(list_file_names)))
{
# the time column is common in files and it is sufficient to store it once
if(i==1) {
plot(data[,"Time"],data[,list_file_names[i]],xlab=xlabel,ylab=ylabel,main=plot_title,col=data_color[i],type="l",ylim=c(0,70))
} else {
lines(data[,"Time"],data[,list_file_names[i]],col=data_color[i])
}
}
legend(x="topleft",legend=list_file_names,col=data_color,horiz=F,lwd=3,bty='n')
ylabel <- "Distance (Å)"
xlabel <- "Time (ns)"
for (i in c(1:length(list_file_names)))
{
# the time column is common in files and it is sufficient to store it once
if(i==1) {
plot(density(data[,list_file_names[i]]),xlab=ylabel,ylab="Frequency",main=plot_title,col=data_color[i],type="l",xlim=c(0,70),ylim=c(0,1),lwd=3)
} else {
lines(density(data[,list_file_names[i]]),col=data_color[i],lwd=3)
}
}
legend(x="topright",legend=list_file_names,col=data_color,horiz=F,lwd=1,bty='n')
summary(cbind(data[,"DT-1"],data[,"EY-2"]))
plot(data[,"Time"],data[,list_file_names[1]],xlab=xlabel,ylab="Frequency",main=plot_title,col=data_color[1],type="l",xlim=c(0,10),ylim=c(0,70),lwd=3)
lines(data[,"Time"],data[,list_file_names[2]],col=data_color[2],lwd=3)
legend(x="topleft",legend=list_file_names[1:2],col=data_color,horiz=F,lwd=1,bty='n')
plot(density(data[,list_file_names[1]]),xlab=ylabel,ylab="Frequency",main=plot_title,col=data_color[1],type="l",xlim=c(0,70),ylim=c(0,1),lwd=3)
lines(density(data[,list_file_names[2]]),col=data_color[2],lwd=3)
legend(x="topright",legend=list_file_names[1:2],col=data_color,horiz=F,lwd=1,bty='n')
plot(data[,"Time"],data[,list_file_names[1]],xlab=xlabel,ylab=ylabel,main=plot_title,col=data_color[1],type="l",xlim=c(0,10),ylim=c(0,70),lwd=3)
lines(data[,"Time"],runmed(data[,list_file_names[1]],k=101),col=data_color[2],lwd=1.5)
lines(data[,"Time"],tricubeMovingAverage(data[,list_file_names[1]],span=0.01),col=data_color[3],lwd=1.5)
abline(h=mean(data[,list_file_names[1]]),lty=2,lwd=3,col="orange")
abline(v=7.2,lty=2,lwd=3,col=rgb(0,0.5,0.8,0.5))
legend(x="topleft",legend=c("DT-1","Running median","Running Average","Mean"),col=c(data_color[1:3],"orange"),horiz=F,lwd=1,bty='n')
summary(CS5801.data)
summary(BOSLAA)
summary(BOS)
summary(LAA)
summary(titanic)
table(titanic$Survived, titanic$Pclass)
titanic$Survived<-as.factor(titanic$Survived)
titanic$Pclass<-as.factor(titanic$Pclass)
arm.folding<-arm
summary(arm.folding)
table(arm.folding$gender, arm.folding$armcross)
arm.table<-table(arm.folding$gender, arm.folding$armcross)
chisq.test(arm.table)
fisher.test(arm.table)
titanic<-read.csv("titanic-all-cols.csv")
titanic<-titanic.all
summary(titanic)
titanic$Survived<-as.factor(titanic$Survived)
titanic$Pclass<-as.factor(titanic$Pclass)
titanic$Survived<-as.factor(titanic$Survived)
titanic$Pclass<-as.factor(titanic$Pclass)
table(titanic$Survived, titanic$Pclass)
chisq.test(table(titanic$Survived, titanic$Pclass))
table(BOSLAASeasonHit)
mean(BOSLAASeasonHit)
chisq.test(table(titanic$Survived)
table(BOSLAASeasonHit)
mean(BOSLAASeasonHit)
chisq.test(table(BOSLAASeasonHit, BOSLAARuns)
table(BOSLAASeasonHit)
mean(BOSLAASeasonHit)
library(gmodels)
install.packages("gmodels")
library(gmodels)
library(gmodels)
CrossTable(titanic$Survived, titanic$Pclass, digits=2, prop.r = TRUE, prop.c = TRUE,  prop.chisq = FALSE,
chisq = TRUE, fisher = TRUE)
CrossTable(BOSLAASeasonHit, BOSLAABats, digits=2, prop.r = TRUE, prop.c = TRUE,  prop.chisq = FALSE,
chisq = TRUE, fisher = TRUE)
knitr::opts_chunk$set(echo = TRUE)
x = c( 'a', "", NA, "d")
x = c( 'a', "", NA, "d")
x
x = c( 'a', "", NA, "d")
typeof(x)
x = c( 'a', "", NA, "d")
typeof(x)
pepepe = seq(0,6,2)
pepepe
##testing correlations is important here
cor(BOSLAAAge, BOSLAASalary, method = c("pearson", "kendall", "spearman"))
cor.test(BOSLAAAge, BOSLAASalary, method=c("pearson", "kendall", "spearman"))
