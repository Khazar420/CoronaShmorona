---
# This is the YAML header
title: "CS5702 W1 Seminar Notebook"
output: html_notebook
author: Martin Shepperd
date: 1/10/2020
# This is the end of the YAML header 
# (use it as a template for your rmarkdown files)
---

This Worksheet has been **slightly updated** (1.10.2020) to better explain the checking for missing data


## Seminar Learning Goals

1. [To create, save and edit R Notebooks using R~Studio](#S1)  
2. [Analyse the results from the google forms "CS5702 Joining Survey"](#S2)  
3. [To run and extend some simple R code to compute book income](#S3)  

**Pre-requisites**

1. You should have completed the Week 0 "Getting Ready" materials  
2. You should have listened to the Week 1 Lecture "Modern Data Introduction"  

This seminar worksheet is organised as an RMarkdown file.  You can **read** it.  You can **run** the embedded R and you can **add** your own R.  I suggest you save it as another file so, if necessary, you can revert to the original.  

Whenever you click **Preview** in the RStudio menu it will render into nicely formatted html which you can look at it in the Viewing Window in RStudio or any web browser.  You may find this easier to read, however, you must edit the .rmd file, i.e., the RMarkdown in the Edit Pane if you want to make any changes. 

You are encouraged to explore and experiment.  Change something and see what happens!

Finally, when we analyse the survey we will cover a lot of new R concepts but don't be discouraged.  We will revisit these concepts over the following weeks to help you consolidate your understanding.


## 1. R Notebooks{#S1}

This worksheet is written using RMarkdown and saved as an [R Notebook](https://blog.rstudio.com/2016/10/05/r-notebooks/).

It is an extremely convenient way to combine explanatory text written in a very simple markdown language and interactive R.  We will use it for all non-trivial R code in this module, for seminars and you will need it for your coursework (CS5801) and exam (CS5802).  

1. You need a YAML header (see this file for an example, or click [here](#YAML_appendix) for more info)
2. You can enter plain text as is.  
3. You can use `#`, `##`, etc for different heading levels.  
4. If you start a line with `1. ` etc this generates an enumerated list (as per this example).  There must be a space between the full stop and the text. 
5. You can insert a code chunk by clicking the green *Insert (Code Chunk)* button on the Edit Pane toolbar or by pressing *Cmd+Option+I*.  

There's a very helpful guide on RMarkdown from RStudio [here](https://rmarkdown.rstudio.com/lesson-2.html).  

Below is an example of an R code chunk which can be executed from within the R Notebook.  You can do this by clicking the green triangle to the top right of the chunk area within the Notebook.  If you wanted to run all the code up until, and including, this code chunk you can click the grey triangle with the green bar ^[In this case there is no previous code so it would make no difference but often RMarkdown contains multiple code chunks.].


```{r}
# This is an R code chunk
print("Goodbye cruel world")
```

**Exercise:**  Edit the R code to output "Goodbye cruel world" or some other message.  Re-run the code chunk.  

**Exercise:**  Save the edited RMarkdown notebook  When you save the notebook, an HTML file containing the code and output will also be saved (click the *Preview* button or press *Cmd+Shift+K* to preview the HTML file).  The raw R markdown has a suffix .rmd and the rendered HTML will have a suffix nb.html.

Check you can see the html version.  The preview shows you a rendered HTML copy of the contents of the editor. The output from the R code chunks is whatever was generated when it was last run in the RStudio.

**Exercise:**  Add a new 3rd level heading named "My RMarkdown Exercise" here.  Add an anchor label `{#<anchor-name>}`.  Now at another point in the document you can link to your anchor, as follows: `[text to display]` immediately followed by the `(<anchor-name>).  Lines 13-15 of this RMarkdown file are examples.

```{r}
z <- 3
z <- z * 17
print(z)
```


## 2. Analysing the Joining Questionnaire{#S2}

You were asked to complete this short, anonymous questionnaire and to critically examine the questions. 

**Exercise:**  What are the key design decisions?  

**Exercise:**  How could the questionnaire be improved? 

This questionnaire has been created using Google Forms and the link is [https://forms.gle/d1FQd9mf8NV1UiQeA](https://forms.gle/d1FQd9mf8NV1UiQeA).  

For this example we will take an *exploratory* approach (for more on EDA see Chapter 4 of the Modern Data Book).

First we must fetch the raw data using a convenient built in function called `read.csv()` that imports the data into an R data frame.  The options indicate the file has headers which can be used as variable names.

```{r}
# Fetch the raw data
# Read the csv file into a new data frame called surveyDF
surveyFileName <- "https://raw.githubusercontent.com/mjshepperd/CS5702-Data/master/CS5702JoiningSurvey_2020.csv"
surveyDF <- read.csv(surveyFileName, header = TRUE, stringsAsFactors = FALSE)
```

For simplicity the csv file name is pointed at a recent version I extracted from Google forms and stored on GitHub.  

### Clean the data

A simple starting point is to *"eyeball"* the imported data.  If you look in the Environment Pane in RStudio you can see a little table icon by the data frame surveyDF.  (Alternatively you could run the R function `View()` directly.)  As a starting point we should check to see if the values appear 'sensible'.

**Exercise:** Make a list of things we should check for when trying to assure the quality of our survey data.

As well data quality issues, there are also matters of convenience.  Looking at the data frame surveyDF we can see Google has used the questions as column headers which have then been interpreted as variable names in the data frame.  Unfortunately this means they're rather clunky so let's clean this up.

```{r}
# Clean up surveyDF column names

names(surveyDF)  # The names() function returns all the dataframe column names

# Choose shorter, clearer names
names(surveyDF)[2] <- "MSc"
names(surveyDF)[3] <- "StudyMode"
names(surveyDF)[4] <- "Background"
names(surveyDF)[5] <- "Motivation"
names(surveyDF)[6] <- "StatsKnowl"
names(surveyDF)[7] <- "ProgKnowl"
names(surveyDF)[8] <- "ProgLangs"
names(surveyDF)[9] <- "Excite"
names(surveyDF)[10] <- "Concern"
```

**Missing** data is frequently a problem for data analysis.  It is so important we will revisit the topic in detail in Week 5 on Data Cleaning.  In R missing observations should be denoted `na`.  Note that this is different to `NaN` (or Not a Number) which refers to the result of a computation e.g., `sqrt(-1)`.  Try it!  

Whilst it might seem a technicality the importing function read.csv() treats an empty string "" as such, i.e., it's still a value since the survey respondent has chosen not to enter any reply as opposed to they never saw the question.  Remember the questionnaire permits no answer as an answer as well as text!

```{r}
# A *very* simple way to check for missing observations in our data frame
# using the is.na() function

is.na(surveyDF)
```

The `is.na()` function returns True or False depending on whether the observation is present or not.  In our case there are no missing values so we only see FALSE results.


### Data frame structure

Note that almost always when we want to refer to a specific variable **in** a data frame we use the `$` notation e.g., `<data frame name>$<column name>`.

It is particularly important to think about what data types of the different variables in our data frame.  One quite easy way to look at the entire data frame is to use the `str()` function.  (str is short for structure obvs!)

```{r}
# Examine the data frame structure
str(surveyDF)
```

We also note some values are extremely long and a bit clunky.  We can replace them with something a little more succinct.

```{r}
# Shorten the MSc titles (for convenience)
surveyDF[surveyDF=="MSc Artificial Intelligence (AI)"] <- "AI"
surveyDF[surveyDF=="MSc Data Science Analytics (DSA)"] <- "DSA"
```


### Some summary statistics

It's usually a good idea to start with some basic summary (descriptive) statistics to give a basic feel for the data.

```{r}
# Using the summary() function on the numeric variables
summary(surveyDF$StatsKnowl)
summary(surveyDF$ProgKnowl)

# And easier to visualise
# I superimpose the a probability density plot over the histogram

hist(surveyDF$StatsKnowl, 
     main="Histogram of Perceived Statistical Knowledge", 
     xlab="Score (1 = low, 10 = high)", 
     col="darkgray",
     xlim=c(1,10),
     breaks=1:10,
     prob = TRUE
     )
lines(density(surveyDF$StatsKnowl), col = "red")  

hist(surveyDF$ProgKnowl, 
     main="Histogram of Perceived Programming Knowledge", 
     xlab="Score (1 = low, 10 = high)", 
     col="darkgray",
     xlim=c(1,10),
     breaks=1:10,
     prob = TRUE
     )
lines(density(surveyDF$ProgKnowl), col = "red")  
# Alternatively we can use boxplots
boxplot(surveyDF$StatsKnowl, surveyDF$ProgKnowl)
```

For the character string variables we can use the `table()` function to produce frequency counts of categories.  This makes no sense when we deal with longer text (since each input will almost certainly be unique in phrasing if not in sentiment).  Similarly the `ProgLangs` variable is problematic because it is multi-valued i.e., it may contain zero or more programming languages.  This is a challenge we will return to in Week 5 on Data Cleaning.

```{r}
# Use the table() function to produce tables of frequency counts
table(surveyDF$MSc)
table(surveyDF$StudyMode)
table(surveyDF$Background)
```


### Multivariate analysis

Here we start exploring the relation ships between more than one variable.

**Exercise**: Is there any relationship between `Background` [UG course] and choice of MSc?

```{r}
# This is an example of a 2-d table of frequencies.
table(surveyDF$Background, surveyDF$MSc)

# and if we want marginal totals wrap table() with the addmargins() function
addmargins(table(surveyDF$Background, surveyDF$MSc)) 

# and if you want proportions then wrap with prop.table()
prop.table(table(surveyDF$Background, surveyDF$MSc))
```

**Exercise**: Do AI and DSA students have different perceived levels of statistical and programming understanding?

To answer this question we need to turn `MSc` into a **factor**.  In R a factor has a special meaning, i.e., a character variable which takes on a limited number of different values (these are often referred to as categorical variables) e.g., StudyMode and MSc, whilst Concern would be a problematic choice because the text content is essentially unbounded.  To make this change of type we use the `as.factor()` function.

```{r}
# Convert MSc into a factor, i.e., use as a categorical variable
surveyDF$MSc <- as.factor(surveyDF$MSc)
```

A common way to visualise the distribution of values for a variable is a **boxplot**.  Boxplots can be used to compare distributions graphically based on five pieces of information, the minimum, Q1, Q2, Q3 and the maximum (they were proposed by the statistician John Tukey, see [wikipedia](https://en.wikipedia.org/wiki/Box_plot)).

In R we can use the boxplot() function to produce boxplots.  Where we want to separate and compare the data by category e.g., MSc we can use a factor.  We tell R how to do this by using a tilde:

`<variable_name> ~ <factor_name>`

for instance, `surveyDF$StatsKnowl ~ surveyDF$MSc` which then forms the argument we pass to the `boxplot()` function in parentheses (see below).

```{r}
# Compare the different distributions of values using a boxplot for each value of the factor MSc.
# Since there are 2 courses (AI and DSA) this produces 2 boxplots of StatsKnowl and we can see
# if there are any differences
boxplot(surveyDF$StatsKnowl ~ surveyDF$MSc, 
        notch = TRUE,            # Shows the 95% confidence intervals
        horizontal = TRUE,
        xlab = "Statistical understanding",
        ylab = "")

# Side by side boxplots of ProgKnowl separated by the factor MSc.
boxplot(surveyDF$ProgKnowl ~ surveyDF$MSc,
        notch = TRUE,           # Shows the 95% confidence intervals
        horizontal = TRUE,
        xlab = "Programming understanding",
        ylab = "")
```

**Exercise:** Now we've generated the boxplots we need to consider whether there are any differences.  What do you think?  How large are the differences?  Do they matter?  Sometimes statisticians test whether the differences are important by means of Inferential Statistics and you will learn about these in CS5701 (Quantitative Data Analysis).

 
### Text analysis

Some of the variables are free format text which can also be analysed in R.  This is a little more complex so at this juncture we will simply generate some word clouds.

```{r}
# To extract all the words into a single character string you need the 
# paste() function with the collapse option.
words <- paste(surveyDF$Excite, collapse = " ")

# Display the words
words

# Save the words in a text file as input to a word cloud generator
# You can change the file name
# NB This will overwrite the previous contents (if any)
fileName <- file("MyWords.txt")
writeLines(words, fileName)
close(fileName)
```

You can then copy and paste into a word cloud generator.  At a later stage we will do this programmatically but to keep things simple for now you can use my [word cloud generator](https://martin-shepperd.shinyapps.io/shinywordcloud/) which is written using R and shiny.  

**Exercise:** What are the dominant themes for (i) `Excite` and (ii) `Concern`?  Does the word cloud also find unimportant words?  What about similar words but with different endings e.g., singular and plural?


## A simple variable assignment example{#S3}

In the previous task you may well have largely relied on the provided R code. Now we move onto learning about basic R syntax and some coding exercises for you to undertake.

Suppose I’m trying to calculate how much money I’m going to make from my *Modern Data* book. There are several different things I will need to store:  
 
- `sales`  how many copies I’ll sell `sales`  
- `price`  the price per copy 
- `numberStudents` number of students in the class (assume I sell one copy per student)
- `recommend` the proportion of students so impressed that they recommend the book to friends and family
- `income` the income generated

Let's turn this into R.

```{r}
# Compute sales income for Martin's book

price <- 10                                     # assume price is 10 UKP per book copy
numberStudents <- 100                           # number of students in the class
recommend <- 0.5                                # proportion of students who recommend the book

sales <- numberStudents * (1 + recommend)
income <- sales * price
outputMsg <- paste("Martin will earn:", income) # format a readable string with the paste function
print(outputMsg, quote = FALSE)                 # output the concatenated string without quotes
```

Although we could just `print()` income, I have added a string to make the output of the code easier to interpret.  Since the `print()` outputs a single string I use `paste()` to combine a character string literal denoted by quotation marks and the income.

**Exercise:** Update the sales income R code to handle tax.  Assume that income is taxed at a flat rate of 20%.  Modify the above R code to output gross income and net (after tax) income.  Using RStudio you can edit this Week 1 Seminar Notebook.

```{r}
# Your extended code needs to go here 


```

HINT: I recommend you define a new numeric variable to store the tax rate and another for net income.  For clarity you might want to rename `income` to make it obvious that it stores gross income.

**Bonus Exercise:** How would you answer the question: it's possible to write a much shorter R program without any extra variables, so why bother?

It's very *important* to get into the habit of writing easy to follow R code.  For this reason I have added comments and tried to select meaningful variable names.

**Exercise:** Please check your understanding of this chapter via this [quick quiz](https://forms.gle/LtHSgTi58TDK9t1f9) (10 simple multiple choice questions).


## Appendix - extra notes on YAML {#YAML_appendix}

YAML rhymes with camel!  It is an acronym for "**Y**AML **A**in't **M**arkup **L**anguage". 

An R Markdown file has three components:

1. Header or front matter written in YAML.
2. Markdown: this is text to describe your R analysis  
3. Code chunks: Chunks of embedded R code that can be executed and rendered 

An RMarkdown file *must* start with a header written using YAML syntax.  There are four default elements in the RStudio YAML header:

    title: The title of your document. NB this is not the same as the file name.
    author: Who wrote the document.
    date: By default this is the date that the file is created.
    output: What format will the output be in.  We will generally use html.  Other options are pdf, various slide formats, etc.

YAML is delineated by `---` and `---`.  

